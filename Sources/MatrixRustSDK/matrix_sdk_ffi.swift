// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(matrix_sdk_ffiFFI)
    import matrix_sdk_ffiFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
        let writer = Writer()
        write(value, into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
(_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
{
    try makeRustCall(callback, errorHandler: { try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    static func read(from buf: Reader) throws -> UInt8 {
        return try lift(buf.readInt())
    }

    static func write(_ value: UInt8, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    static func read(from buf: Reader) throws -> UInt16 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    static func read(from buf: Reader) throws -> UInt32 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    static func read(from buf: Reader) throws -> UInt64 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    static func write(_ value: Bool, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}

public protocol AuthenticationServiceProtocol {
    func configureHomeserver(serverName: String) throws
    func login(username: String, password: String, initialDeviceName: String?, deviceId: String?) throws -> Client
    func restoreWithAccessToken(token: String, deviceId: String) throws -> Client
    func homeserverDetails() -> HomeserverLoginDetails?
}

public class AuthenticationService: AuthenticationServiceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(basePath: String) {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                matrix_sdk_ffi_91ce_AuthenticationService_new(
                    FfiConverterString.lower(basePath), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_AuthenticationService_object_free(pointer, $0) }
    }

    public func configureHomeserver(serverName: String) throws {
        try
            rustCallWithError(FfiConverterTypeAuthenticationError.self) {
                matrix_sdk_ffi_91ce_AuthenticationService_configure_homeserver(self.pointer,
                                                                               FfiConverterString.lower(serverName), $0)
            }
    }

    public func login(username: String, password: String, initialDeviceName: String?, deviceId: String?) throws -> Client {
        return try FfiConverterTypeClient.lift(
            try
                rustCallWithError(FfiConverterTypeAuthenticationError.self) {
                    matrix_sdk_ffi_91ce_AuthenticationService_login(self.pointer,
                                                                    FfiConverterString.lower(username),
                                                                    FfiConverterString.lower(password),
                                                                    FfiConverterOptionString.lower(initialDeviceName),
                                                                    FfiConverterOptionString.lower(deviceId), $0)
                }
        )
    }

    public func restoreWithAccessToken(token: String, deviceId: String) throws -> Client {
        return try FfiConverterTypeClient.lift(
            try
                rustCallWithError(FfiConverterTypeAuthenticationError.self) {
                    matrix_sdk_ffi_91ce_AuthenticationService_restore_with_access_token(self.pointer,
                                                                                        FfiConverterString.lower(token),
                                                                                        FfiConverterString.lower(deviceId), $0)
                }
        )
    }

    public func homeserverDetails() -> HomeserverLoginDetails? {
        return try! FfiConverterOptionTypeHomeserverLoginDetails.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_AuthenticationService_homeserver_details_63d3(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeAuthenticationService: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticationService

    static func read(from buf: Reader) throws -> AuthenticationService {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: AuthenticationService, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticationService {
        return AuthenticationService(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: AuthenticationService) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol ClientProtocol {
    func setDelegate(delegate: ClientDelegate?)
    func login(username: String, password: String, initialDeviceName: String?, deviceId: String?) throws
    func restoreLogin(restoreToken: String) throws
    func restoreToken() throws -> String
    func userId() throws -> String
    func displayName() throws -> String
    func avatarUrl() throws -> String
    func deviceId() throws -> String
    func accountData(eventType: String) throws -> String?
    func setAccountData(eventType: String, content: String) throws
    func getMediaContent(source: MediaSource) throws -> [UInt8]
    func getMediaThumbnail(source: MediaSource, width: UInt64, height: UInt64) throws -> [UInt8]
    func getSessionVerificationController() throws -> SessionVerificationController
    func fullSlidingSync() throws -> SlidingSync
    func logout() throws
    func setPusher(pushkey: String, kind: PusherKind?, appId: String, appDisplayName: String, deviceDisplayName: String, profileTag: String?, lang: String, url: String?, format: PushFormat?, defaultPayload: String?) throws
    func hasFirstSynced() -> Bool
    func homeserver() -> String
    func isGuest() -> Bool
    func isSoftLogout() -> Bool
    func isSyncing() -> Bool
    func rooms() -> [Room]
    func slidingSync() -> SlidingSyncBuilder
    func startSync(timelineLimit: UInt16?)
}

public class Client: ClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_Client_object_free(pointer, $0) }
    }

    public func setDelegate(delegate: ClientDelegate?) {
        try!
            rustCall {
                matrix_sdk_ffi_91ce_Client_set_delegate(self.pointer,
                                                        FfiConverterOptionCallbackInterfaceClientDelegate.lower(delegate), $0)
            }
    }

    public func login(username: String, password: String, initialDeviceName: String?, deviceId: String?) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_Client_login(self.pointer,
                                                 FfiConverterString.lower(username),
                                                 FfiConverterString.lower(password),
                                                 FfiConverterOptionString.lower(initialDeviceName),
                                                 FfiConverterOptionString.lower(deviceId), $0)
            }
    }

    public func restoreLogin(restoreToken: String) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_Client_restore_login(self.pointer,
                                                         FfiConverterString.lower(restoreToken), $0)
            }
    }

    public func restoreToken() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_restore_token(self.pointer, $0)
                }
        )
    }

    public func userId() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_user_id(self.pointer, $0)
                }
        )
    }

    public func displayName() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_display_name(self.pointer, $0)
                }
        )
    }

    public func avatarUrl() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_avatar_url(self.pointer, $0)
                }
        )
    }

    public func deviceId() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_device_id(self.pointer, $0)
                }
        )
    }

    public func accountData(eventType: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_account_data(self.pointer,
                                                            FfiConverterString.lower(eventType), $0)
                }
        )
    }

    public func setAccountData(eventType: String, content: String) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_Client_set_account_data(self.pointer,
                                                            FfiConverterString.lower(eventType),
                                                            FfiConverterString.lower(content), $0)
            }
    }

    public func getMediaContent(source: MediaSource) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_get_media_content(self.pointer,
                                                                 FfiConverterTypeMediaSource.lower(source), $0)
                }
        )
    }

    public func getMediaThumbnail(source: MediaSource, width: UInt64, height: UInt64) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_get_media_thumbnail(self.pointer,
                                                                   FfiConverterTypeMediaSource.lower(source),
                                                                   FfiConverterUInt64.lower(width),
                                                                   FfiConverterUInt64.lower(height), $0)
                }
        )
    }

    public func getSessionVerificationController() throws -> SessionVerificationController {
        return try FfiConverterTypeSessionVerificationController.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_get_session_verification_controller(self.pointer, $0)
                }
        )
    }

    public func fullSlidingSync() throws -> SlidingSync {
        return try FfiConverterTypeSlidingSync.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Client_full_sliding_sync(self.pointer, $0)
                }
        )
    }

    public func logout() throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_Client_logout(self.pointer, $0)
            }
    }

    public func setPusher(pushkey: String, kind: PusherKind?, appId: String, appDisplayName: String, deviceDisplayName: String, profileTag: String?, lang: String, url: String?, format: PushFormat?, defaultPayload: String?) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_Client_set_pusher(self.pointer,
                                                      FfiConverterString.lower(pushkey),
                                                      FfiConverterOptionTypePusherKind.lower(kind),
                                                      FfiConverterString.lower(appId),
                                                      FfiConverterString.lower(appDisplayName),
                                                      FfiConverterString.lower(deviceDisplayName),
                                                      FfiConverterOptionString.lower(profileTag),
                                                      FfiConverterString.lower(lang),
                                                      FfiConverterOptionString.lower(url),
                                                      FfiConverterOptionTypePushFormat.lower(format),
                                                      FfiConverterOptionString.lower(defaultPayload), $0)
            }
    }

    public func hasFirstSynced() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Client_has_first_synced_a950(self.pointer, $0)
                }
        )
    }

    public func homeserver() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Client_homeserver_a948(self.pointer, $0)
                }
        )
    }

    public func isGuest() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Client_is_guest_c78e(self.pointer, $0)
                }
        )
    }

    public func isSoftLogout() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Client_is_soft_logout_533b(self.pointer, $0)
                }
        )
    }

    public func isSyncing() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Client_is_syncing_7300(self.pointer, $0)
                }
        )
    }

    public func rooms() -> [Room] {
        return try! FfiConverterSequenceTypeRoom.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Client_rooms_9015(self.pointer, $0)
                }
        )
    }

    public func slidingSync() -> SlidingSyncBuilder {
        return try! FfiConverterTypeSlidingSyncBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Client_sliding_sync_dd01(self.pointer, $0)
                }
        )
    }

    public func startSync(timelineLimit: UInt16?) {
        try!
            rustCall {
                _uniffi_matrix_sdk_ffi_impl_Client_start_sync_e626(self.pointer,
                                                                   FfiConverterOptionUInt16.lower(timelineLimit), $0)
            }
    }
}

private struct FfiConverterTypeClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Client

    static func read(from buf: Reader) throws -> Client {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Client, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
        return Client(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Client) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol ClientBuilderProtocol {
    func build() throws -> Client
    func basePath(path: String) -> ClientBuilder
    func homeserverUrl(url: String) -> ClientBuilder
    func serverName(serverName: String) -> ClientBuilder
    func userAgent(userAgent: String) -> ClientBuilder
    func username(username: String) -> ClientBuilder
}

public class ClientBuilder: ClientBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                matrix_sdk_ffi_91ce_ClientBuilder_new($0)
            })
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_ClientBuilder_object_free(pointer, $0) }
    }

    public func build() throws -> Client {
        return try FfiConverterTypeClient.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_ClientBuilder_build(self.pointer, $0)
                }
        )
    }

    public func basePath(path: String) -> ClientBuilder {
        return try! FfiConverterTypeClientBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_ClientBuilder_base_path_2a3d(self.pointer,
                                                                             FfiConverterString.lower(path), $0)
                }
        )
    }

    public func homeserverUrl(url: String) -> ClientBuilder {
        return try! FfiConverterTypeClientBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_ClientBuilder_homeserver_url_8c7b(self.pointer,
                                                                                  FfiConverterString.lower(url), $0)
                }
        )
    }

    public func serverName(serverName: String) -> ClientBuilder {
        return try! FfiConverterTypeClientBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_ClientBuilder_server_name_6b00(self.pointer,
                                                                               FfiConverterString.lower(serverName), $0)
                }
        )
    }

    public func userAgent(userAgent: String) -> ClientBuilder {
        return try! FfiConverterTypeClientBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_ClientBuilder_user_agent_6787(self.pointer,
                                                                              FfiConverterString.lower(userAgent), $0)
                }
        )
    }

    public func username(username: String) -> ClientBuilder {
        return try! FfiConverterTypeClientBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_ClientBuilder_username_4d4a(self.pointer,
                                                                            FfiConverterString.lower(username), $0)
                }
        )
    }
}

private struct FfiConverterTypeClientBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ClientBuilder

    static func read(from buf: Reader) throws -> ClientBuilder {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: ClientBuilder, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ClientBuilder {
        return ClientBuilder(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: ClientBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol EventTimelineItemProtocol {
    func reactions() -> [Reaction]
    func content() -> TimelineItemContent
    func eventId() -> String?
    func fmtDebug() -> String
    func isOwn() -> Bool
    func key() -> TimelineKey
    func originServerTs() -> UInt64?
    func raw() -> String?
    func sender() -> String
}

public class EventTimelineItem: EventTimelineItemProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_EventTimelineItem_object_free(pointer, $0) }
    }

    public func reactions() -> [Reaction] {
        return try! FfiConverterSequenceTypeReaction.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_EventTimelineItem_reactions(self.pointer, $0)
                }
        )
    }

    public func content() -> TimelineItemContent {
        return try! FfiConverterTypeTimelineItemContent.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_EventTimelineItem_content_2662(self.pointer, $0)
                }
        )
    }

    public func eventId() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_EventTimelineItem_event_id_e7d(self.pointer, $0)
                }
        )
    }

    public func fmtDebug() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_EventTimelineItem_fmt_debug_52c6(self.pointer, $0)
                }
        )
    }

    public func isOwn() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_EventTimelineItem_is_own_e917(self.pointer, $0)
                }
        )
    }

    public func key() -> TimelineKey {
        return try! FfiConverterTypeTimelineKey.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_EventTimelineItem_key_ffba(self.pointer, $0)
                }
        )
    }

    public func originServerTs() -> UInt64? {
        return try! FfiConverterOptionUInt64.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_EventTimelineItem_origin_server_ts_c0eb(self.pointer, $0)
                }
        )
    }

    public func raw() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_EventTimelineItem_raw_867(self.pointer, $0)
                }
        )
    }

    public func sender() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_EventTimelineItem_sender_1cf5(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeEventTimelineItem: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EventTimelineItem

    static func read(from buf: Reader) throws -> EventTimelineItem {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: EventTimelineItem, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EventTimelineItem {
        return EventTimelineItem(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: EventTimelineItem) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol HomeserverLoginDetailsProtocol {
    func authenticationIssuer() -> String?
    func supportsPasswordLogin() -> Bool
    func url() -> String
}

public class HomeserverLoginDetails: HomeserverLoginDetailsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { _uniffi_matrix_sdk_ffi_object_free_HomeserverLoginDetails_2400(pointer, $0) }
    }

    public func authenticationIssuer() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_HomeserverLoginDetails_authentication_issuer_2e81(self.pointer, $0)
                }
        )
    }

    public func supportsPasswordLogin() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_HomeserverLoginDetails_supports_password_login_6dfc(self.pointer, $0)
                }
        )
    }

    public func url() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_HomeserverLoginDetails_url_7eb5(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeHomeserverLoginDetails: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HomeserverLoginDetails

    static func read(from buf: Reader) throws -> HomeserverLoginDetails {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: HomeserverLoginDetails, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HomeserverLoginDetails {
        return HomeserverLoginDetails(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: HomeserverLoginDetails) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol MediaSourceProtocol {
    func url() -> String
}

public class MediaSource: MediaSourceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_MediaSource_object_free(pointer, $0) }
    }

    public func url() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_MediaSource_url(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeMediaSource: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MediaSource

    static func read(from buf: Reader) throws -> MediaSource {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: MediaSource, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MediaSource {
        return MediaSource(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: MediaSource) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol MessageProtocol {
    func msgtype() -> MessageType?
    func body() -> String
    func inReplyTo() -> String?
    func isEdited() -> Bool
}

public class Message: MessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_Message_object_free(pointer, $0) }
    }

    public func msgtype() -> MessageType? {
        return try! FfiConverterOptionTypeMessageType.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_Message_msgtype(self.pointer, $0)
                }
        )
    }

    public func body() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Message_body_fffa(self.pointer, $0)
                }
        )
    }

    public func inReplyTo() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Message_in_reply_to_7d3a(self.pointer, $0)
                }
        )
    }

    public func isEdited() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Message_is_edited_e61f(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeMessage: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Message

    static func read(from buf: Reader) throws -> Message {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Message, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Message {
        return Message(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Message) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol NotificationServiceProtocol {
    func getNotificationItem(roomId: String, eventId: String) throws -> NotificationItem?
}

public class NotificationService: NotificationServiceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(basePath: String, userId: String) {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                matrix_sdk_ffi_91ce_NotificationService_new(
                    FfiConverterString.lower(basePath),
                    FfiConverterString.lower(userId), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_NotificationService_object_free(pointer, $0) }
    }

    public func getNotificationItem(roomId: String, eventId: String) throws -> NotificationItem? {
        return try FfiConverterOptionTypeNotificationItem.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_NotificationService_get_notification_item(self.pointer,
                                                                                  FfiConverterString.lower(roomId),
                                                                                  FfiConverterString.lower(eventId), $0)
                }
        )
    }
}

private struct FfiConverterTypeNotificationService: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NotificationService

    static func read(from buf: Reader) throws -> NotificationService {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: NotificationService, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NotificationService {
        return NotificationService(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: NotificationService) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol RoomProtocol {
    func displayName() throws -> String
    func memberAvatarUrl(userId: String) throws -> String?
    func memberDisplayName(userId: String) throws -> String?
    func addTimelineListener(listener: TimelineListener)
    func paginateBackwards(limit: UInt16) throws -> PaginationOutcome
    func send(msg: RoomMessageEventContent, txnId: String?) throws
    func sendReply(msg: String, inReplyToEventId: String, txnId: String?) throws
    func redact(eventId: String, reason: String?, txnId: String?) throws
    func avatarUrl() -> String?
    func id() -> String
    func isDirect() -> Bool
    func isEncrypted() -> Bool
    func isPublic() -> Bool
    func isSpace() -> Bool
    func isTombstoned() -> Bool
    func membership() -> Membership
    func name() -> String?
    func removeTimeline()
    func topic() -> String?
}

public class Room: RoomProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_Room_object_free(pointer, $0) }
    }

    public func displayName() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Room_display_name(self.pointer, $0)
                }
        )
    }

    public func memberAvatarUrl(userId: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Room_member_avatar_url(self.pointer,
                                                               FfiConverterString.lower(userId), $0)
                }
        )
    }

    public func memberDisplayName(userId: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Room_member_display_name(self.pointer,
                                                                 FfiConverterString.lower(userId), $0)
                }
        )
    }

    public func addTimelineListener(listener: TimelineListener) {
        try!
            rustCall {
                matrix_sdk_ffi_91ce_Room_add_timeline_listener(self.pointer,
                                                               FfiConverterCallbackInterfaceTimelineListener.lower(listener), $0)
            }
    }

    public func paginateBackwards(limit: UInt16) throws -> PaginationOutcome {
        return try FfiConverterTypePaginationOutcome.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_Room_paginate_backwards(self.pointer,
                                                                FfiConverterUInt16.lower(limit), $0)
                }
        )
    }

    public func send(msg: RoomMessageEventContent, txnId: String?) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_Room_send(self.pointer,
                                              FfiConverterTypeRoomMessageEventContent.lower(msg),
                                              FfiConverterOptionString.lower(txnId), $0)
            }
    }

    public func sendReply(msg: String, inReplyToEventId: String, txnId: String?) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_Room_send_reply(self.pointer,
                                                    FfiConverterString.lower(msg),
                                                    FfiConverterString.lower(inReplyToEventId),
                                                    FfiConverterOptionString.lower(txnId), $0)
            }
    }

    public func redact(eventId: String, reason: String?, txnId: String?) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_Room_redact(self.pointer,
                                                FfiConverterString.lower(eventId),
                                                FfiConverterOptionString.lower(reason),
                                                FfiConverterOptionString.lower(txnId), $0)
            }
    }

    public func avatarUrl() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_avatar_url_4d24(self.pointer, $0)
                }
        )
    }

    public func id() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_id_9008(self.pointer, $0)
                }
        )
    }

    public func isDirect() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_is_direct_e3a4(self.pointer, $0)
                }
        )
    }

    public func isEncrypted() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_is_encrypted_112d(self.pointer, $0)
                }
        )
    }

    public func isPublic() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_is_public_cd9a(self.pointer, $0)
                }
        )
    }

    public func isSpace() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_is_space_ac7a(self.pointer, $0)
                }
        )
    }

    public func isTombstoned() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_is_tombstoned_acd3(self.pointer, $0)
                }
        )
    }

    public func membership() -> Membership {
        return try! FfiConverterTypeMembership.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_membership_4bda(self.pointer, $0)
                }
        )
    }

    public func name() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_name_ec9(self.pointer, $0)
                }
        )
    }

    public func removeTimeline() {
        try!
            rustCall {
                _uniffi_matrix_sdk_ffi_impl_Room_remove_timeline_7d85(self.pointer, $0)
            }
    }

    public func topic() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_Room_topic_389d(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeRoom: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Room

    static func read(from buf: Reader) throws -> Room {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Room, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Room {
        return Room(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Room) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol RoomMessageEventContentProtocol {}

public class RoomMessageEventContent: RoomMessageEventContentProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_RoomMessageEventContent_object_free(pointer, $0) }
    }
}

private struct FfiConverterTypeRoomMessageEventContent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RoomMessageEventContent

    static func read(from buf: Reader) throws -> RoomMessageEventContent {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: RoomMessageEventContent, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RoomMessageEventContent {
        return RoomMessageEventContent(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: RoomMessageEventContent) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol SessionVerificationControllerProtocol {
    func setDelegate(delegate: SessionVerificationControllerDelegate?)
    func requestVerification() throws
    func approveVerification() throws
    func declineVerification() throws
    func cancelVerification() throws
    func isVerified() -> Bool
}

public class SessionVerificationController: SessionVerificationControllerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_SessionVerificationController_object_free(pointer, $0) }
    }

    public func setDelegate(delegate: SessionVerificationControllerDelegate?) {
        try!
            rustCall {
                matrix_sdk_ffi_91ce_SessionVerificationController_set_delegate(self.pointer,
                                                                               FfiConverterOptionCallbackInterfaceSessionVerificationControllerDelegate.lower(delegate), $0)
            }
    }

    public func requestVerification() throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_SessionVerificationController_request_verification(self.pointer, $0)
            }
    }

    public func approveVerification() throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_SessionVerificationController_approve_verification(self.pointer, $0)
            }
    }

    public func declineVerification() throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_SessionVerificationController_decline_verification(self.pointer, $0)
            }
    }

    public func cancelVerification() throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_SessionVerificationController_cancel_verification(self.pointer, $0)
            }
    }

    public func isVerified() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SessionVerificationController_is_verified_d4e8(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeSessionVerificationController: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SessionVerificationController

    static func read(from buf: Reader) throws -> SessionVerificationController {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: SessionVerificationController, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SessionVerificationController {
        return SessionVerificationController(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: SessionVerificationController) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol SessionVerificationEmojiProtocol {
    func description() -> String
    func symbol() -> String
}

public class SessionVerificationEmoji: SessionVerificationEmojiProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_SessionVerificationEmoji_object_free(pointer, $0) }
    }

    public func description() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SessionVerificationEmoji_description_c0e1(self.pointer, $0)
                }
        )
    }

    public func symbol() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SessionVerificationEmoji_symbol_eb61(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeSessionVerificationEmoji: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SessionVerificationEmoji

    static func read(from buf: Reader) throws -> SessionVerificationEmoji {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: SessionVerificationEmoji, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SessionVerificationEmoji {
        return SessionVerificationEmoji(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: SessionVerificationEmoji) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol SlidingSyncProtocol {
    func setObserver(observer: SlidingSyncObserver?)
    func subscribe(roomId: String, settings: RoomSubscription?) throws
    func unsubscribe(roomId: String) throws
    func getView(name: String) -> SlidingSyncView?
    func getRoom(roomId: String) throws -> SlidingSyncRoom?
    func getRooms(roomIds: [String]) throws -> [SlidingSyncRoom?]
    func sync() -> StoppableSpawn
}

public class SlidingSync: SlidingSyncProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_SlidingSync_object_free(pointer, $0) }
    }

    public func setObserver(observer: SlidingSyncObserver?) {
        try!
            rustCall {
                matrix_sdk_ffi_91ce_SlidingSync_set_observer(self.pointer,
                                                             FfiConverterOptionCallbackInterfaceSlidingSyncObserver.lower(observer), $0)
            }
    }

    public func subscribe(roomId: String, settings: RoomSubscription?) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_SlidingSync_subscribe(self.pointer,
                                                          FfiConverterString.lower(roomId),
                                                          FfiConverterOptionTypeRoomSubscription.lower(settings), $0)
            }
    }

    public func unsubscribe(roomId: String) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                matrix_sdk_ffi_91ce_SlidingSync_unsubscribe(self.pointer,
                                                            FfiConverterString.lower(roomId), $0)
            }
    }

    public func getView(name: String) -> SlidingSyncView? {
        return try! FfiConverterOptionTypeSlidingSyncView.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_SlidingSync_get_view(self.pointer,
                                                             FfiConverterString.lower(name), $0)
                }
        )
    }

    public func getRoom(roomId: String) throws -> SlidingSyncRoom? {
        return try FfiConverterOptionTypeSlidingSyncRoom.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_SlidingSync_get_room(self.pointer,
                                                             FfiConverterString.lower(roomId), $0)
                }
        )
    }

    public func getRooms(roomIds: [String]) throws -> [SlidingSyncRoom?] {
        return try FfiConverterSequenceOptionTypeSlidingSyncRoom.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_SlidingSync_get_rooms(self.pointer,
                                                              FfiConverterSequenceString.lower(roomIds), $0)
                }
        )
    }

    public func sync() -> StoppableSpawn {
        return try! FfiConverterTypeStoppableSpawn.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSync_sync_1c2d(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeSlidingSync: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SlidingSync

    static func read(from buf: Reader) throws -> SlidingSync {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: SlidingSync, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SlidingSync {
        return SlidingSync(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: SlidingSync) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol SlidingSyncBuilderProtocol {
    func homeserver(url: String) throws -> SlidingSyncBuilder
    func build() throws -> SlidingSync
    func addFullsyncView() -> SlidingSyncBuilder
    func addView(v: SlidingSyncView) -> SlidingSyncBuilder
    func noViews() -> SlidingSyncBuilder
    func withCommonExtensions() -> SlidingSyncBuilder
}

public class SlidingSyncBuilder: SlidingSyncBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_SlidingSyncBuilder_object_free(pointer, $0) }
    }

    public func homeserver(url: String) throws -> SlidingSyncBuilder {
        return try FfiConverterTypeSlidingSyncBuilder.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_SlidingSyncBuilder_homeserver(self.pointer,
                                                                      FfiConverterString.lower(url), $0)
                }
        )
    }

    public func build() throws -> SlidingSync {
        return try FfiConverterTypeSlidingSync.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_SlidingSyncBuilder_build(self.pointer, $0)
                }
        )
    }

    public func addFullsyncView() -> SlidingSyncBuilder {
        return try! FfiConverterTypeSlidingSyncBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncBuilder_add_fullsync_view_fcaf(self.pointer, $0)
                }
        )
    }

    public func addView(v: SlidingSyncView) -> SlidingSyncBuilder {
        return try! FfiConverterTypeSlidingSyncBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncBuilder_add_view_26c9(self.pointer,
                                                                                 FfiConverterTypeSlidingSyncView.lower(v), $0)
                }
        )
    }

    public func noViews() -> SlidingSyncBuilder {
        return try! FfiConverterTypeSlidingSyncBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncBuilder_no_views_ad32(self.pointer, $0)
                }
        )
    }

    public func withCommonExtensions() -> SlidingSyncBuilder {
        return try! FfiConverterTypeSlidingSyncBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncBuilder_with_common_extensions_ea25(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeSlidingSyncBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SlidingSyncBuilder

    static func read(from buf: Reader) throws -> SlidingSyncBuilder {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: SlidingSyncBuilder, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SlidingSyncBuilder {
        return SlidingSyncBuilder(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: SlidingSyncBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol SlidingSyncRoomProtocol {
    func fullRoom() -> Room?
    func hasUnreadNotifications() -> Bool
    func isDm() -> Bool?
    func isInitial() -> Bool?
    func isLoadingMore() -> Bool
    func latestRoomMessage() -> EventTimelineItem?
    func name() -> String?
    func roomId() -> String
    func unreadNotifications() -> UnreadNotificationsCount
}

public class SlidingSyncRoom: SlidingSyncRoomProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_SlidingSyncRoom_object_free(pointer, $0) }
    }

    public func fullRoom() -> Room? {
        return try! FfiConverterOptionTypeRoom.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncRoom_full_room_4a0b(self.pointer, $0)
                }
        )
    }

    public func hasUnreadNotifications() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncRoom_has_unread_notifications_a72f(self.pointer, $0)
                }
        )
    }

    public func isDm() -> Bool? {
        return try! FfiConverterOptionBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncRoom_is_dm_4d1(self.pointer, $0)
                }
        )
    }

    public func isInitial() -> Bool? {
        return try! FfiConverterOptionBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncRoom_is_initial_d79e(self.pointer, $0)
                }
        )
    }

    public func isLoadingMore() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncRoom_is_loading_more_fe3(self.pointer, $0)
                }
        )
    }

    public func latestRoomMessage() -> EventTimelineItem? {
        return try! FfiConverterOptionTypeEventTimelineItem.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncRoom_latest_room_message_6b3d(self.pointer, $0)
                }
        )
    }

    public func name() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncRoom_name_86ea(self.pointer, $0)
                }
        )
    }

    public func roomId() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncRoom_room_id_9b5e(self.pointer, $0)
                }
        )
    }

    public func unreadNotifications() -> UnreadNotificationsCount {
        return try! FfiConverterTypeUnreadNotificationsCount.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncRoom_unread_notifications_e3f5(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeSlidingSyncRoom: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SlidingSyncRoom

    static func read(from buf: Reader) throws -> SlidingSyncRoom {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: SlidingSyncRoom, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SlidingSyncRoom {
        return SlidingSyncRoom(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: SlidingSyncRoom) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol SlidingSyncViewProtocol {
    func observeRoomList(observer: SlidingSyncViewRoomListObserver) -> StoppableSpawn
    func observeRoomsCount(observer: SlidingSyncViewRoomsCountObserver) -> StoppableSpawn
    func observeState(observer: SlidingSyncViewStateObserver) -> StoppableSpawn
    func observeRoomItems(observer: SlidingSyncViewRoomItemsObserver) -> StoppableSpawn
    func currentRoomsList() -> [RoomListEntry]
    func addRange(start: UInt32, end: UInt32)
    func currentRoomCount() -> UInt32?
    func resetRanges()
    func setRange(start: UInt32, end: UInt32)
}

public class SlidingSyncView: SlidingSyncViewProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_SlidingSyncView_object_free(pointer, $0) }
    }

    public func observeRoomList(observer: SlidingSyncViewRoomListObserver) -> StoppableSpawn {
        return try! FfiConverterTypeStoppableSpawn.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_SlidingSyncView_observe_room_list(self.pointer,
                                                                          FfiConverterCallbackInterfaceSlidingSyncViewRoomListObserver.lower(observer), $0)
                }
        )
    }

    public func observeRoomsCount(observer: SlidingSyncViewRoomsCountObserver) -> StoppableSpawn {
        return try! FfiConverterTypeStoppableSpawn.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_SlidingSyncView_observe_rooms_count(self.pointer,
                                                                            FfiConverterCallbackInterfaceSlidingSyncViewRoomsCountObserver.lower(observer), $0)
                }
        )
    }

    public func observeState(observer: SlidingSyncViewStateObserver) -> StoppableSpawn {
        return try! FfiConverterTypeStoppableSpawn.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_SlidingSyncView_observe_state(self.pointer,
                                                                      FfiConverterCallbackInterfaceSlidingSyncViewStateObserver.lower(observer), $0)
                }
        )
    }

    public func observeRoomItems(observer: SlidingSyncViewRoomItemsObserver) -> StoppableSpawn {
        return try! FfiConverterTypeStoppableSpawn.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_SlidingSyncView_observe_room_items(self.pointer,
                                                                           FfiConverterCallbackInterfaceSlidingSyncViewRoomItemsObserver.lower(observer), $0)
                }
        )
    }

    public func currentRoomsList() -> [RoomListEntry] {
        return try! FfiConverterSequenceTypeRoomListEntry.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_SlidingSyncView_current_rooms_list(self.pointer, $0)
                }
        )
    }

    public func addRange(start: UInt32, end: UInt32) {
        try!
            rustCall {
                _uniffi_matrix_sdk_ffi_impl_SlidingSyncView_add_range_3ff2(self.pointer,
                                                                           FfiConverterUInt32.lower(start),
                                                                           FfiConverterUInt32.lower(end), $0)
            }
    }

    public func currentRoomCount() -> UInt32? {
        return try! FfiConverterOptionUInt32.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncView_current_room_count_7123(self.pointer, $0)
                }
        )
    }

    public func resetRanges() {
        try!
            rustCall {
                _uniffi_matrix_sdk_ffi_impl_SlidingSyncView_reset_ranges_81ac(self.pointer, $0)
            }
    }

    public func setRange(start: UInt32, end: UInt32) {
        try!
            rustCall {
                _uniffi_matrix_sdk_ffi_impl_SlidingSyncView_set_range_28fb(self.pointer,
                                                                           FfiConverterUInt32.lower(start),
                                                                           FfiConverterUInt32.lower(end), $0)
            }
    }
}

private struct FfiConverterTypeSlidingSyncView: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SlidingSyncView

    static func read(from buf: Reader) throws -> SlidingSyncView {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: SlidingSyncView, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SlidingSyncView {
        return SlidingSyncView(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: SlidingSyncView) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol SlidingSyncViewBuilderProtocol {
    func syncMode(mode: SlidingSyncMode) -> SlidingSyncViewBuilder
    func requiredState(requiredState: [RequiredState]) -> SlidingSyncViewBuilder
    func build() throws -> SlidingSyncView
    func addRange(from: UInt32, to: UInt32) -> SlidingSyncViewBuilder
    func batchSize(batchSize: UInt32) -> SlidingSyncViewBuilder
    func name(name: String) -> SlidingSyncViewBuilder
    func noTimelineLimit() -> SlidingSyncViewBuilder
    func resetRanges() -> SlidingSyncViewBuilder
    func sort(sort: [String]) -> SlidingSyncViewBuilder
    func timelineLimit(limit: UInt32) -> SlidingSyncViewBuilder
}

public class SlidingSyncViewBuilder: SlidingSyncViewBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                matrix_sdk_ffi_91ce_SlidingSyncViewBuilder_new($0)
            })
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_SlidingSyncViewBuilder_object_free(pointer, $0) }
    }

    public func syncMode(mode: SlidingSyncMode) -> SlidingSyncViewBuilder {
        return try! FfiConverterTypeSlidingSyncViewBuilder.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_SlidingSyncViewBuilder_sync_mode(self.pointer,
                                                                         FfiConverterTypeSlidingSyncMode.lower(mode), $0)
                }
        )
    }

    public func requiredState(requiredState: [RequiredState]) -> SlidingSyncViewBuilder {
        return try! FfiConverterTypeSlidingSyncViewBuilder.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_SlidingSyncViewBuilder_required_state(self.pointer,
                                                                              FfiConverterSequenceTypeRequiredState.lower(requiredState), $0)
                }
        )
    }

    public func build() throws -> SlidingSyncView {
        return try FfiConverterTypeSlidingSyncView.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    matrix_sdk_ffi_91ce_SlidingSyncViewBuilder_build(self.pointer, $0)
                }
        )
    }

    public func addRange(from: UInt32, to: UInt32) -> SlidingSyncViewBuilder {
        return try! FfiConverterTypeSlidingSyncViewBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncViewBuilder_add_range_13a3(self.pointer,
                                                                                      FfiConverterUInt32.lower(from),
                                                                                      FfiConverterUInt32.lower(to), $0)
                }
        )
    }

    public func batchSize(batchSize: UInt32) -> SlidingSyncViewBuilder {
        return try! FfiConverterTypeSlidingSyncViewBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncViewBuilder_batch_size_c33f(self.pointer,
                                                                                       FfiConverterUInt32.lower(batchSize), $0)
                }
        )
    }

    public func name(name: String) -> SlidingSyncViewBuilder {
        return try! FfiConverterTypeSlidingSyncViewBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncViewBuilder_name_8e7b(self.pointer,
                                                                                 FfiConverterString.lower(name), $0)
                }
        )
    }

    public func noTimelineLimit() -> SlidingSyncViewBuilder {
        return try! FfiConverterTypeSlidingSyncViewBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncViewBuilder_no_timeline_limit_e80e(self.pointer, $0)
                }
        )
    }

    public func resetRanges() -> SlidingSyncViewBuilder {
        return try! FfiConverterTypeSlidingSyncViewBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncViewBuilder_reset_ranges_8b42(self.pointer, $0)
                }
        )
    }

    public func sort(sort: [String]) -> SlidingSyncViewBuilder {
        return try! FfiConverterTypeSlidingSyncViewBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncViewBuilder_sort_7839(self.pointer,
                                                                                 FfiConverterSequenceString.lower(sort), $0)
                }
        )
    }

    public func timelineLimit(limit: UInt32) -> SlidingSyncViewBuilder {
        return try! FfiConverterTypeSlidingSyncViewBuilder.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_SlidingSyncViewBuilder_timeline_limit_4fbd(self.pointer,
                                                                                           FfiConverterUInt32.lower(limit), $0)
                }
        )
    }
}

private struct FfiConverterTypeSlidingSyncViewBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SlidingSyncViewBuilder

    static func read(from buf: Reader) throws -> SlidingSyncViewBuilder {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: SlidingSyncViewBuilder, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SlidingSyncViewBuilder {
        return SlidingSyncViewBuilder(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: SlidingSyncViewBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol StoppableSpawnProtocol {
    func cancel()
    func isCancelled() -> Bool
}

public class StoppableSpawn: StoppableSpawnProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_StoppableSpawn_object_free(pointer, $0) }
    }

    public func cancel() {
        try!
            rustCall {
                _uniffi_matrix_sdk_ffi_impl_StoppableSpawn_cancel_d04(self.pointer, $0)
            }
    }

    public func isCancelled() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_StoppableSpawn_is_cancelled_c93c(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeStoppableSpawn: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = StoppableSpawn

    static func read(from buf: Reader) throws -> StoppableSpawn {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: StoppableSpawn, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> StoppableSpawn {
        return StoppableSpawn(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: StoppableSpawn) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol TimelineDiffProtocol {
    func replace() -> [TimelineItem]?
    func insertAt() -> InsertAtData?
    func updateAt() -> UpdateAtData?
    func removeAt() -> UInt32?
    func move() -> MoveData?
    func push() -> TimelineItem?
    func change() -> TimelineChange
}

public class TimelineDiff: TimelineDiffProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_TimelineDiff_object_free(pointer, $0) }
    }

    public func replace() -> [TimelineItem]? {
        return try! FfiConverterOptionSequenceTypeTimelineItem.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_TimelineDiff_replace(self.pointer, $0)
                }
        )
    }

    public func insertAt() -> InsertAtData? {
        return try! FfiConverterOptionTypeInsertAtData.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_TimelineDiff_insert_at(self.pointer, $0)
                }
        )
    }

    public func updateAt() -> UpdateAtData? {
        return try! FfiConverterOptionTypeUpdateAtData.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_TimelineDiff_update_at(self.pointer, $0)
                }
        )
    }

    public func removeAt() -> UInt32? {
        return try! FfiConverterOptionUInt32.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_TimelineDiff_remove_at(self.pointer, $0)
                }
        )
    }

    public func move() -> MoveData? {
        return try! FfiConverterOptionTypeMoveData.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_TimelineDiff_move(self.pointer, $0)
                }
        )
    }

    public func push() -> TimelineItem? {
        return try! FfiConverterOptionTypeTimelineItem.lift(
            try!
                rustCall {
                    matrix_sdk_ffi_91ce_TimelineDiff_push(self.pointer, $0)
                }
        )
    }

    public func change() -> TimelineChange {
        return try! FfiConverterTypeTimelineChange.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_TimelineDiff_change_fa90(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeTimelineDiff: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TimelineDiff

    static func read(from buf: Reader) throws -> TimelineDiff {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: TimelineDiff, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TimelineDiff {
        return TimelineDiff(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: TimelineDiff) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol TimelineItemProtocol {
    func asEvent() -> EventTimelineItem?
    func asVirtual() -> VirtualTimelineItem?
    func fmtDebug() -> String
}

public class TimelineItem: TimelineItemProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_matrix_sdk_ffi_91ce_TimelineItem_object_free(pointer, $0) }
    }

    public func asEvent() -> EventTimelineItem? {
        return try! FfiConverterOptionTypeEventTimelineItem.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_TimelineItem_as_event_29dc(self.pointer, $0)
                }
        )
    }

    public func asVirtual() -> VirtualTimelineItem? {
        return try! FfiConverterOptionTypeVirtualTimelineItem.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_TimelineItem_as_virtual_ed31(self.pointer, $0)
                }
        )
    }

    public func fmtDebug() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_TimelineItem_fmt_debug_2488(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeTimelineItem: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TimelineItem

    static func read(from buf: Reader) throws -> TimelineItem {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: TimelineItem, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TimelineItem {
        return TimelineItem(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: TimelineItem) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol TimelineItemContentProtocol {
    func asMessage() -> Message?
    func isRedactedMessage() -> Bool
}

public class TimelineItemContent: TimelineItemContentProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { _uniffi_matrix_sdk_ffi_object_free_TimelineItemContent_2b31(pointer, $0) }
    }

    public func asMessage() -> Message? {
        return try! FfiConverterOptionTypeMessage.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_TimelineItemContent_as_message_9a93(self.pointer, $0)
                }
        )
    }

    public func isRedactedMessage() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_TimelineItemContent_is_redacted_message_4ff0(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeTimelineItemContent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TimelineItemContent

    static func read(from buf: Reader) throws -> TimelineItemContent {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: TimelineItemContent, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TimelineItemContent {
        return TimelineItemContent(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: TimelineItemContent) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol UnreadNotificationsCountProtocol {
    func hasNotifications() -> Bool
    func highlightCount() -> UInt32
    func notificationCount() -> UInt32
}

public class UnreadNotificationsCount: UnreadNotificationsCountProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { _uniffi_matrix_sdk_ffi_object_free_UnreadNotificationsCount_b323(pointer, $0) }
    }

    public func hasNotifications() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_UnreadNotificationsCount_has_notifications_8e89(self.pointer, $0)
                }
        )
    }

    public func highlightCount() -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_UnreadNotificationsCount_highlight_count_ea64(self.pointer, $0)
                }
        )
    }

    public func notificationCount() -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    _uniffi_matrix_sdk_ffi_impl_UnreadNotificationsCount_notification_count_b16c(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeUnreadNotificationsCount: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = UnreadNotificationsCount

    static func read(from buf: Reader) throws -> UnreadNotificationsCount {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: UnreadNotificationsCount, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> UnreadNotificationsCount {
        return UnreadNotificationsCount(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: UnreadNotificationsCount) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol VirtualTimelineItemProtocol {}

public class VirtualTimelineItem: VirtualTimelineItemProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { _uniffi_matrix_sdk_ffi_object_free_VirtualTimelineItem_21e1(pointer, $0) }
    }
}

private struct FfiConverterTypeVirtualTimelineItem: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = VirtualTimelineItem

    static func read(from buf: Reader) throws -> VirtualTimelineItem {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: VirtualTimelineItem, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> VirtualTimelineItem {
        return VirtualTimelineItem(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: VirtualTimelineItem) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public struct EmoteMessageContent {
    public var body: String
    public var formatted: FormattedBody?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(body: String, formatted: FormattedBody?) {
        self.body = body
        self.formatted = formatted
    }
}

extension EmoteMessageContent: Equatable, Hashable {
    public static func == (lhs: EmoteMessageContent, rhs: EmoteMessageContent) -> Bool {
        if lhs.body != rhs.body {
            return false
        }
        if lhs.formatted != rhs.formatted {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(body)
        hasher.combine(formatted)
    }
}

private struct FfiConverterTypeEmoteMessageContent: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> EmoteMessageContent {
        return try EmoteMessageContent(
            body: FfiConverterString.read(from: buf),
            formatted: FfiConverterOptionTypeFormattedBody.read(from: buf)
        )
    }

    fileprivate static func write(_ value: EmoteMessageContent, into buf: Writer) {
        FfiConverterString.write(value.body, into: buf)
        FfiConverterOptionTypeFormattedBody.write(value.formatted, into: buf)
    }
}

public struct FormattedBody {
    public var format: MessageFormat
    public var body: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(format: MessageFormat, body: String) {
        self.format = format
        self.body = body
    }
}

extension FormattedBody: Equatable, Hashable {
    public static func == (lhs: FormattedBody, rhs: FormattedBody) -> Bool {
        if lhs.format != rhs.format {
            return false
        }
        if lhs.body != rhs.body {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(format)
        hasher.combine(body)
    }
}

private struct FfiConverterTypeFormattedBody: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> FormattedBody {
        return try FormattedBody(
            format: FfiConverterTypeMessageFormat.read(from: buf),
            body: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: FormattedBody, into buf: Writer) {
        FfiConverterTypeMessageFormat.write(value.format, into: buf)
        FfiConverterString.write(value.body, into: buf)
    }
}

public struct ImageInfo {
    public var height: UInt64?
    public var width: UInt64?
    public var mimetype: String?
    public var size: UInt64?
    public var thumbnailInfo: ThumbnailInfo?
    public var thumbnailSource: MediaSource?
    public var blurhash: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(height: UInt64?, width: UInt64?, mimetype: String?, size: UInt64?, thumbnailInfo: ThumbnailInfo?, thumbnailSource: MediaSource?, blurhash: String?) {
        self.height = height
        self.width = width
        self.mimetype = mimetype
        self.size = size
        self.thumbnailInfo = thumbnailInfo
        self.thumbnailSource = thumbnailSource
        self.blurhash = blurhash
    }
}

private struct FfiConverterTypeImageInfo: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> ImageInfo {
        return try ImageInfo(
            height: FfiConverterOptionUInt64.read(from: buf),
            width: FfiConverterOptionUInt64.read(from: buf),
            mimetype: FfiConverterOptionString.read(from: buf),
            size: FfiConverterOptionUInt64.read(from: buf),
            thumbnailInfo: FfiConverterOptionTypeThumbnailInfo.read(from: buf),
            thumbnailSource: FfiConverterOptionTypeMediaSource.read(from: buf),
            blurhash: FfiConverterOptionString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: ImageInfo, into buf: Writer) {
        FfiConverterOptionUInt64.write(value.height, into: buf)
        FfiConverterOptionUInt64.write(value.width, into: buf)
        FfiConverterOptionString.write(value.mimetype, into: buf)
        FfiConverterOptionUInt64.write(value.size, into: buf)
        FfiConverterOptionTypeThumbnailInfo.write(value.thumbnailInfo, into: buf)
        FfiConverterOptionTypeMediaSource.write(value.thumbnailSource, into: buf)
        FfiConverterOptionString.write(value.blurhash, into: buf)
    }
}

public struct ImageMessageContent {
    public var body: String
    public var source: MediaSource
    public var info: ImageInfo?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(body: String, source: MediaSource, info: ImageInfo?) {
        self.body = body
        self.source = source
        self.info = info
    }
}

private struct FfiConverterTypeImageMessageContent: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> ImageMessageContent {
        return try ImageMessageContent(
            body: FfiConverterString.read(from: buf),
            source: FfiConverterTypeMediaSource.read(from: buf),
            info: FfiConverterOptionTypeImageInfo.read(from: buf)
        )
    }

    fileprivate static func write(_ value: ImageMessageContent, into buf: Writer) {
        FfiConverterString.write(value.body, into: buf)
        FfiConverterTypeMediaSource.write(value.source, into: buf)
        FfiConverterOptionTypeImageInfo.write(value.info, into: buf)
    }
}

public struct InsertAtData {
    public var index: UInt32
    public var item: TimelineItem

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(index: UInt32, item: TimelineItem) {
        self.index = index
        self.item = item
    }
}

private struct FfiConverterTypeInsertAtData: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> InsertAtData {
        return try InsertAtData(
            index: FfiConverterUInt32.read(from: buf),
            item: FfiConverterTypeTimelineItem.read(from: buf)
        )
    }

    fileprivate static func write(_ value: InsertAtData, into buf: Writer) {
        FfiConverterUInt32.write(value.index, into: buf)
        FfiConverterTypeTimelineItem.write(value.item, into: buf)
    }
}

public struct MoveData {
    public var oldIndex: UInt32
    public var newIndex: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(oldIndex: UInt32, newIndex: UInt32) {
        self.oldIndex = oldIndex
        self.newIndex = newIndex
    }
}

extension MoveData: Equatable, Hashable {
    public static func == (lhs: MoveData, rhs: MoveData) -> Bool {
        if lhs.oldIndex != rhs.oldIndex {
            return false
        }
        if lhs.newIndex != rhs.newIndex {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(oldIndex)
        hasher.combine(newIndex)
    }
}

private struct FfiConverterTypeMoveData: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> MoveData {
        return try MoveData(
            oldIndex: FfiConverterUInt32.read(from: buf),
            newIndex: FfiConverterUInt32.read(from: buf)
        )
    }

    fileprivate static func write(_ value: MoveData, into buf: Writer) {
        FfiConverterUInt32.write(value.oldIndex, into: buf)
        FfiConverterUInt32.write(value.newIndex, into: buf)
    }
}

public struct NoticeMessageContent {
    public var body: String
    public var formatted: FormattedBody?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(body: String, formatted: FormattedBody?) {
        self.body = body
        self.formatted = formatted
    }
}

extension NoticeMessageContent: Equatable, Hashable {
    public static func == (lhs: NoticeMessageContent, rhs: NoticeMessageContent) -> Bool {
        if lhs.body != rhs.body {
            return false
        }
        if lhs.formatted != rhs.formatted {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(body)
        hasher.combine(formatted)
    }
}

private struct FfiConverterTypeNoticeMessageContent: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> NoticeMessageContent {
        return try NoticeMessageContent(
            body: FfiConverterString.read(from: buf),
            formatted: FfiConverterOptionTypeFormattedBody.read(from: buf)
        )
    }

    fileprivate static func write(_ value: NoticeMessageContent, into buf: Writer) {
        FfiConverterString.write(value.body, into: buf)
        FfiConverterOptionTypeFormattedBody.write(value.formatted, into: buf)
    }
}

public struct NotificationItem {
    public var item: TimelineItem
    public var title: String
    public var subtitle: String?
    public var isNoisy: Bool
    public var avatarUrl: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(item: TimelineItem, title: String, subtitle: String?, isNoisy: Bool, avatarUrl: String?) {
        self.item = item
        self.title = title
        self.subtitle = subtitle
        self.isNoisy = isNoisy
        self.avatarUrl = avatarUrl
    }
}

private struct FfiConverterTypeNotificationItem: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> NotificationItem {
        return try NotificationItem(
            item: FfiConverterTypeTimelineItem.read(from: buf),
            title: FfiConverterString.read(from: buf),
            subtitle: FfiConverterOptionString.read(from: buf),
            isNoisy: FfiConverterBool.read(from: buf),
            avatarUrl: FfiConverterOptionString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: NotificationItem, into buf: Writer) {
        FfiConverterTypeTimelineItem.write(value.item, into: buf)
        FfiConverterString.write(value.title, into: buf)
        FfiConverterOptionString.write(value.subtitle, into: buf)
        FfiConverterBool.write(value.isNoisy, into: buf)
        FfiConverterOptionString.write(value.avatarUrl, into: buf)
    }
}

public struct PaginationOutcome {
    public var moreMessages: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(moreMessages: Bool) {
        self.moreMessages = moreMessages
    }
}

extension PaginationOutcome: Equatable, Hashable {
    public static func == (lhs: PaginationOutcome, rhs: PaginationOutcome) -> Bool {
        if lhs.moreMessages != rhs.moreMessages {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(moreMessages)
    }
}

private struct FfiConverterTypePaginationOutcome: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> PaginationOutcome {
        return try PaginationOutcome(
            moreMessages: FfiConverterBool.read(from: buf)
        )
    }

    fileprivate static func write(_ value: PaginationOutcome, into buf: Writer) {
        FfiConverterBool.write(value.moreMessages, into: buf)
    }
}

public struct Reaction {
    public var key: String
    public var count: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(key: String, count: UInt64) {
        self.key = key
        self.count = count
    }
}

extension Reaction: Equatable, Hashable {
    public static func == (lhs: Reaction, rhs: Reaction) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        if lhs.count != rhs.count {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
        hasher.combine(count)
    }
}

private struct FfiConverterTypeReaction: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> Reaction {
        return try Reaction(
            key: FfiConverterString.read(from: buf),
            count: FfiConverterUInt64.read(from: buf)
        )
    }

    fileprivate static func write(_ value: Reaction, into buf: Writer) {
        FfiConverterString.write(value.key, into: buf)
        FfiConverterUInt64.write(value.count, into: buf)
    }
}

public struct RequiredState {
    public var key: String
    public var value: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(key: String, value: String) {
        self.key = key
        self.value = value
    }
}

extension RequiredState: Equatable, Hashable {
    public static func == (lhs: RequiredState, rhs: RequiredState) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
        hasher.combine(value)
    }
}

private struct FfiConverterTypeRequiredState: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> RequiredState {
        return try RequiredState(
            key: FfiConverterString.read(from: buf),
            value: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: RequiredState, into buf: Writer) {
        FfiConverterString.write(value.key, into: buf)
        FfiConverterString.write(value.value, into: buf)
    }
}

public struct RoomSubscription {
    public var requiredState: [RequiredState]?
    public var timelineLimit: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(requiredState: [RequiredState]?, timelineLimit: UInt32?) {
        self.requiredState = requiredState
        self.timelineLimit = timelineLimit
    }
}

extension RoomSubscription: Equatable, Hashable {
    public static func == (lhs: RoomSubscription, rhs: RoomSubscription) -> Bool {
        if lhs.requiredState != rhs.requiredState {
            return false
        }
        if lhs.timelineLimit != rhs.timelineLimit {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(requiredState)
        hasher.combine(timelineLimit)
    }
}

private struct FfiConverterTypeRoomSubscription: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> RoomSubscription {
        return try RoomSubscription(
            requiredState: FfiConverterOptionSequenceTypeRequiredState.read(from: buf),
            timelineLimit: FfiConverterOptionUInt32.read(from: buf)
        )
    }

    fileprivate static func write(_ value: RoomSubscription, into buf: Writer) {
        FfiConverterOptionSequenceTypeRequiredState.write(value.requiredState, into: buf)
        FfiConverterOptionUInt32.write(value.timelineLimit, into: buf)
    }
}

public struct TextMessageContent {
    public var body: String
    public var formatted: FormattedBody?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(body: String, formatted: FormattedBody?) {
        self.body = body
        self.formatted = formatted
    }
}

extension TextMessageContent: Equatable, Hashable {
    public static func == (lhs: TextMessageContent, rhs: TextMessageContent) -> Bool {
        if lhs.body != rhs.body {
            return false
        }
        if lhs.formatted != rhs.formatted {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(body)
        hasher.combine(formatted)
    }
}

private struct FfiConverterTypeTextMessageContent: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> TextMessageContent {
        return try TextMessageContent(
            body: FfiConverterString.read(from: buf),
            formatted: FfiConverterOptionTypeFormattedBody.read(from: buf)
        )
    }

    fileprivate static func write(_ value: TextMessageContent, into buf: Writer) {
        FfiConverterString.write(value.body, into: buf)
        FfiConverterOptionTypeFormattedBody.write(value.formatted, into: buf)
    }
}

public struct ThumbnailInfo {
    public var height: UInt64?
    public var width: UInt64?
    public var mimetype: String?
    public var size: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(height: UInt64?, width: UInt64?, mimetype: String?, size: UInt64?) {
        self.height = height
        self.width = width
        self.mimetype = mimetype
        self.size = size
    }
}

extension ThumbnailInfo: Equatable, Hashable {
    public static func == (lhs: ThumbnailInfo, rhs: ThumbnailInfo) -> Bool {
        if lhs.height != rhs.height {
            return false
        }
        if lhs.width != rhs.width {
            return false
        }
        if lhs.mimetype != rhs.mimetype {
            return false
        }
        if lhs.size != rhs.size {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(height)
        hasher.combine(width)
        hasher.combine(mimetype)
        hasher.combine(size)
    }
}

private struct FfiConverterTypeThumbnailInfo: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> ThumbnailInfo {
        return try ThumbnailInfo(
            height: FfiConverterOptionUInt64.read(from: buf),
            width: FfiConverterOptionUInt64.read(from: buf),
            mimetype: FfiConverterOptionString.read(from: buf),
            size: FfiConverterOptionUInt64.read(from: buf)
        )
    }

    fileprivate static func write(_ value: ThumbnailInfo, into buf: Writer) {
        FfiConverterOptionUInt64.write(value.height, into: buf)
        FfiConverterOptionUInt64.write(value.width, into: buf)
        FfiConverterOptionString.write(value.mimetype, into: buf)
        FfiConverterOptionUInt64.write(value.size, into: buf)
    }
}

public struct UpdateAtData {
    public var index: UInt32
    public var item: TimelineItem

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(index: UInt32, item: TimelineItem) {
        self.index = index
        self.item = item
    }
}

private struct FfiConverterTypeUpdateAtData: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> UpdateAtData {
        return try UpdateAtData(
            index: FfiConverterUInt32.read(from: buf),
            item: FfiConverterTypeTimelineItem.read(from: buf)
        )
    }

    fileprivate static func write(_ value: UpdateAtData, into buf: Writer) {
        FfiConverterUInt32.write(value.index, into: buf)
        FfiConverterTypeTimelineItem.write(value.item, into: buf)
    }
}

public struct UpdateSummary {
    public var views: [String]
    public var rooms: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(views: [String], rooms: [String]) {
        self.views = views
        self.rooms = rooms
    }
}

extension UpdateSummary: Equatable, Hashable {
    public static func == (lhs: UpdateSummary, rhs: UpdateSummary) -> Bool {
        if lhs.views != rhs.views {
            return false
        }
        if lhs.rooms != rhs.rooms {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(views)
        hasher.combine(rooms)
    }
}

private struct FfiConverterTypeUpdateSummary: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> UpdateSummary {
        return try UpdateSummary(
            views: FfiConverterSequenceString.read(from: buf),
            rooms: FfiConverterSequenceString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: UpdateSummary, into buf: Writer) {
        FfiConverterSequenceString.write(value.views, into: buf)
        FfiConverterSequenceString.write(value.rooms, into: buf)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Membership {
    case invited
    case joined
    case left
}

private struct FfiConverterTypeMembership: FfiConverterRustBuffer {
    typealias SwiftType = Membership

    static func read(from buf: Reader) throws -> Membership {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .invited

        case 2: return .joined

        case 3: return .left

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: Membership, into buf: Writer) {
        switch value {
        case .invited:
            buf.writeInt(Int32(1))

        case .joined:
            buf.writeInt(Int32(2))

        case .left:
            buf.writeInt(Int32(3))
        }
    }
}

extension Membership: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MessageFormat {
    case html
    case unknown
}

private struct FfiConverterTypeMessageFormat: FfiConverterRustBuffer {
    typealias SwiftType = MessageFormat

    static func read(from buf: Reader) throws -> MessageFormat {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .html

        case 2: return .unknown

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: MessageFormat, into buf: Writer) {
        switch value {
        case .html:
            buf.writeInt(Int32(1))

        case .unknown:
            buf.writeInt(Int32(2))
        }
    }
}

extension MessageFormat: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MessageType {
    case emote(content: EmoteMessageContent)
    case image(content: ImageMessageContent)
    case notice(content: NoticeMessageContent)
    case text(content: TextMessageContent)
}

private struct FfiConverterTypeMessageType: FfiConverterRustBuffer {
    typealias SwiftType = MessageType

    static func read(from buf: Reader) throws -> MessageType {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .emote(
                content: try FfiConverterTypeEmoteMessageContent.read(from: buf)
            )

        case 2: return .image(
                content: try FfiConverterTypeImageMessageContent.read(from: buf)
            )

        case 3: return .notice(
                content: try FfiConverterTypeNoticeMessageContent.read(from: buf)
            )

        case 4: return .text(
                content: try FfiConverterTypeTextMessageContent.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: MessageType, into buf: Writer) {
        switch value {
        case let .emote(content):
            buf.writeInt(Int32(1))
            FfiConverterTypeEmoteMessageContent.write(content, into: buf)

        case let .image(content):
            buf.writeInt(Int32(2))
            FfiConverterTypeImageMessageContent.write(content, into: buf)

        case let .notice(content):
            buf.writeInt(Int32(3))
            FfiConverterTypeNoticeMessageContent.write(content, into: buf)

        case let .text(content):
            buf.writeInt(Int32(4))
            FfiConverterTypeTextMessageContent.write(content, into: buf)
        }
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PushFormat {
    case eventIdOnly
}

private struct FfiConverterTypePushFormat: FfiConverterRustBuffer {
    typealias SwiftType = PushFormat

    static func read(from buf: Reader) throws -> PushFormat {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .eventIdOnly

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: PushFormat, into buf: Writer) {
        switch value {
        case .eventIdOnly:
            buf.writeInt(Int32(1))
        }
    }
}

extension PushFormat: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PusherKind {
    case http
    case email
}

private struct FfiConverterTypePusherKind: FfiConverterRustBuffer {
    typealias SwiftType = PusherKind

    static func read(from buf: Reader) throws -> PusherKind {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .http

        case 2: return .email

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: PusherKind, into buf: Writer) {
        switch value {
        case .http:
            buf.writeInt(Int32(1))

        case .email:
            buf.writeInt(Int32(2))
        }
    }
}

extension PusherKind: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RoomListEntry {
    case empty
    case invalidated(roomId: String)
    case filled(roomId: String)
}

private struct FfiConverterTypeRoomListEntry: FfiConverterRustBuffer {
    typealias SwiftType = RoomListEntry

    static func read(from buf: Reader) throws -> RoomListEntry {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .empty

        case 2: return .invalidated(
                roomId: try FfiConverterString.read(from: buf)
            )

        case 3: return .filled(
                roomId: try FfiConverterString.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: RoomListEntry, into buf: Writer) {
        switch value {
        case .empty:
            buf.writeInt(Int32(1))

        case let .invalidated(roomId):
            buf.writeInt(Int32(2))
            FfiConverterString.write(roomId, into: buf)

        case let .filled(roomId):
            buf.writeInt(Int32(3))
            FfiConverterString.write(roomId, into: buf)
        }
    }
}

extension RoomListEntry: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SlidingSyncMode {
    case fullSync
    case selective
}

private struct FfiConverterTypeSlidingSyncMode: FfiConverterRustBuffer {
    typealias SwiftType = SlidingSyncMode

    static func read(from buf: Reader) throws -> SlidingSyncMode {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .fullSync

        case 2: return .selective

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: SlidingSyncMode, into buf: Writer) {
        switch value {
        case .fullSync:
            buf.writeInt(Int32(1))

        case .selective:
            buf.writeInt(Int32(2))
        }
    }
}

extension SlidingSyncMode: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SlidingSyncState {
    case cold
    case preload
    case catchingUp
    case live
}

private struct FfiConverterTypeSlidingSyncState: FfiConverterRustBuffer {
    typealias SwiftType = SlidingSyncState

    static func read(from buf: Reader) throws -> SlidingSyncState {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .cold

        case 2: return .preload

        case 3: return .catchingUp

        case 4: return .live

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: SlidingSyncState, into buf: Writer) {
        switch value {
        case .cold:
            buf.writeInt(Int32(1))

        case .preload:
            buf.writeInt(Int32(2))

        case .catchingUp:
            buf.writeInt(Int32(3))

        case .live:
            buf.writeInt(Int32(4))
        }
    }
}

extension SlidingSyncState: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SlidingSyncViewRoomsListDiff {
    case replace(values: [RoomListEntry])
    case insertAt(index: UInt32, value: RoomListEntry)
    case updateAt(index: UInt32, value: RoomListEntry)
    case removeAt(index: UInt32)
    case move(oldIndex: UInt32, newIndex: UInt32)
    case push(value: RoomListEntry)
}

private struct FfiConverterTypeSlidingSyncViewRoomsListDiff: FfiConverterRustBuffer {
    typealias SwiftType = SlidingSyncViewRoomsListDiff

    static func read(from buf: Reader) throws -> SlidingSyncViewRoomsListDiff {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .replace(
                values: try FfiConverterSequenceTypeRoomListEntry.read(from: buf)
            )

        case 2: return .insertAt(
                index: try FfiConverterUInt32.read(from: buf),
                value: try FfiConverterTypeRoomListEntry.read(from: buf)
            )

        case 3: return .updateAt(
                index: try FfiConverterUInt32.read(from: buf),
                value: try FfiConverterTypeRoomListEntry.read(from: buf)
            )

        case 4: return .removeAt(
                index: try FfiConverterUInt32.read(from: buf)
            )

        case 5: return .move(
                oldIndex: try FfiConverterUInt32.read(from: buf),
                newIndex: try FfiConverterUInt32.read(from: buf)
            )

        case 6: return .push(
                value: try FfiConverterTypeRoomListEntry.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: SlidingSyncViewRoomsListDiff, into buf: Writer) {
        switch value {
        case let .replace(values):
            buf.writeInt(Int32(1))
            FfiConverterSequenceTypeRoomListEntry.write(values, into: buf)

        case let .insertAt(index, value):
            buf.writeInt(Int32(2))
            FfiConverterUInt32.write(index, into: buf)
            FfiConverterTypeRoomListEntry.write(value, into: buf)

        case let .updateAt(index, value):
            buf.writeInt(Int32(3))
            FfiConverterUInt32.write(index, into: buf)
            FfiConverterTypeRoomListEntry.write(value, into: buf)

        case let .removeAt(index):
            buf.writeInt(Int32(4))
            FfiConverterUInt32.write(index, into: buf)

        case let .move(oldIndex, newIndex):
            buf.writeInt(Int32(5))
            FfiConverterUInt32.write(oldIndex, into: buf)
            FfiConverterUInt32.write(newIndex, into: buf)

        case let .push(value):
            buf.writeInt(Int32(6))
            FfiConverterTypeRoomListEntry.write(value, into: buf)
        }
    }
}

extension SlidingSyncViewRoomsListDiff: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TimelineChange {
    case replace
    case insertAt
    case updateAt
    case removeAt
    case move
    case push
    case pop
    case clear
}

private struct FfiConverterTypeTimelineChange: FfiConverterRustBuffer {
    typealias SwiftType = TimelineChange

    static func read(from buf: Reader) throws -> TimelineChange {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .replace

        case 2: return .insertAt

        case 3: return .updateAt

        case 4: return .removeAt

        case 5: return .move

        case 6: return .push

        case 7: return .pop

        case 8: return .clear

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: TimelineChange, into buf: Writer) {
        switch value {
        case .replace:
            buf.writeInt(Int32(1))

        case .insertAt:
            buf.writeInt(Int32(2))

        case .updateAt:
            buf.writeInt(Int32(3))

        case .removeAt:
            buf.writeInt(Int32(4))

        case .move:
            buf.writeInt(Int32(5))

        case .push:
            buf.writeInt(Int32(6))

        case .pop:
            buf.writeInt(Int32(7))

        case .clear:
            buf.writeInt(Int32(8))
        }
    }
}

extension TimelineChange: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TimelineKey {
    case transactionId(txnId: String)
    case eventId(eventId: String)
}

private struct FfiConverterTypeTimelineKey: FfiConverterRustBuffer {
    typealias SwiftType = TimelineKey

    static func read(from buf: Reader) throws -> TimelineKey {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .transactionId(
                txnId: try FfiConverterString.read(from: buf)
            )

        case 2: return .eventId(
                eventId: try FfiConverterString.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: TimelineKey, into buf: Writer) {
        switch value {
        case let .transactionId(txnId):
            buf.writeInt(Int32(1))
            FfiConverterString.write(txnId, into: buf)

        case let .eventId(eventId):
            buf.writeInt(Int32(2))
            FfiConverterString.write(eventId, into: buf)
        }
    }
}

extension TimelineKey: Equatable, Hashable {}

public enum AuthenticationError {
    // Simple error enums only carry a message
    case ClientMissing(message: String)

    // Simple error enums only carry a message
    case SessionMissing(message: String)

    // Simple error enums only carry a message
    case Generic(message: String)
}

private struct FfiConverterTypeAuthenticationError: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticationError

    static func read(from buf: Reader) throws -> AuthenticationError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .ClientMissing(
                message: try FfiConverterString.read(from: buf)
            )

        case 2: return .SessionMissing(
                message: try FfiConverterString.read(from: buf)
            )

        case 3: return .Generic(
                message: try FfiConverterString.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: AuthenticationError, into buf: Writer) {
        switch value {
        case let .ClientMissing(message):
            buf.writeInt(Int32(1))
            FfiConverterString.write(message, into: buf)
        case let .SessionMissing(message):
            buf.writeInt(Int32(2))
            FfiConverterString.write(message, into: buf)
        case let .Generic(message):
            buf.writeInt(Int32(3))
            FfiConverterString.write(message, into: buf)
        }
    }
}

extension AuthenticationError: Equatable, Hashable {}

extension AuthenticationError: Error {}

public enum ClientError {
    case Generic(msg: String)
}

private struct FfiConverterTypeClientError: FfiConverterRustBuffer {
    typealias SwiftType = ClientError

    static func read(from buf: Reader) throws -> ClientError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .Generic(
                msg: try FfiConverterString.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: ClientError, into buf: Writer) {
        switch value {
        case let .Generic(msg):
            buf.writeInt(Int32(1))
            FfiConverterString.write(msg, into: buf)
        }
    }
}

extension ClientError: Equatable, Hashable {}

extension ClientError: Error {}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias Handle = UInt64
private class ConcurrentHandleMap<T> {
    private var leftMap: [Handle: T] = [:]
    private var counter: [Handle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: Handle] = [:]

    private let lock = NSLock()
    private var currentHandle: Handle = 0
    private let stride: Handle = 1

    func insert(obj: T) -> Handle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: Handle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: Handle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: Handle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0

// Declaration and FfiConverters for ClientDelegate Callback Interface

public protocol ClientDelegate: AnyObject {
    func didReceiveSyncUpdate()
    func didReceiveAuthError(isSoftLogout: Bool)
    func didUpdateRestoreToken()
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceClientDelegate: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveSyncUpdate(_ swiftCallbackInterface: ClientDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didReceiveSyncUpdate()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }
        func invokeDidReceiveAuthError(_ swiftCallbackInterface: ClientDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.didReceiveAuthError(
                isSoftLogout: try FfiConverterBool.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }
        func invokeDidUpdateRestoreToken(_ swiftCallbackInterface: ClientDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didUpdateRestoreToken()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb: ClientDelegate
        do {
            cb = try FfiConverterCallbackInterfaceClientDelegate.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("ClientDelegate: Invalid handle")
            return -1
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceClientDelegate.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            do {
                out_buf.pointee = try invokeDidReceiveSyncUpdate(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }
        case 2:
            do {
                out_buf.pointee = try invokeDidReceiveAuthError(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }
        case 3:
            do {
                out_buf.pointee = try invokeDidUpdateRestoreToken(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceClientDelegate {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_matrix_sdk_ffi_91ce_ClientDelegate_init_callback(foreignCallbackCallbackInterfaceClientDelegate, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<ClientDelegate>()
}

extension FfiConverterCallbackInterfaceClientDelegate: FfiConverter {
    typealias SwiftType = ClientDelegate
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

// Declaration and FfiConverters for SessionVerificationControllerDelegate Callback Interface

public protocol SessionVerificationControllerDelegate: AnyObject {
    func didReceiveVerificationData(data: [SessionVerificationEmoji])
    func didFail()
    func didCancel()
    func didFinish()
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSessionVerificationControllerDelegate: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveVerificationData(_ swiftCallbackInterface: SessionVerificationControllerDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.didReceiveVerificationData(
                data: try FfiConverterSequenceTypeSessionVerificationEmoji.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }
        func invokeDidFail(_ swiftCallbackInterface: SessionVerificationControllerDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didFail()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }
        func invokeDidCancel(_ swiftCallbackInterface: SessionVerificationControllerDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didCancel()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }
        func invokeDidFinish(_ swiftCallbackInterface: SessionVerificationControllerDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didFinish()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb: SessionVerificationControllerDelegate
        do {
            cb = try FfiConverterCallbackInterfaceSessionVerificationControllerDelegate.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("SessionVerificationControllerDelegate: Invalid handle")
            return -1
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceSessionVerificationControllerDelegate.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            do {
                out_buf.pointee = try invokeDidReceiveVerificationData(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }
        case 2:
            do {
                out_buf.pointee = try invokeDidFail(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }
        case 3:
            do {
                out_buf.pointee = try invokeDidCancel(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }
        case 4:
            do {
                out_buf.pointee = try invokeDidFinish(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSessionVerificationControllerDelegate {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_matrix_sdk_ffi_91ce_SessionVerificationControllerDelegate_init_callback(foreignCallbackCallbackInterfaceSessionVerificationControllerDelegate, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<SessionVerificationControllerDelegate>()
}

extension FfiConverterCallbackInterfaceSessionVerificationControllerDelegate: FfiConverter {
    typealias SwiftType = SessionVerificationControllerDelegate
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

// Declaration and FfiConverters for SlidingSyncObserver Callback Interface

public protocol SlidingSyncObserver: AnyObject {
    func didReceiveSyncUpdate(summary: UpdateSummary)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSlidingSyncObserver: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveSyncUpdate(_ swiftCallbackInterface: SlidingSyncObserver, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.didReceiveSyncUpdate(
                summary: try FfiConverterTypeUpdateSummary.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb: SlidingSyncObserver
        do {
            cb = try FfiConverterCallbackInterfaceSlidingSyncObserver.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("SlidingSyncObserver: Invalid handle")
            return -1
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceSlidingSyncObserver.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            do {
                out_buf.pointee = try invokeDidReceiveSyncUpdate(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSlidingSyncObserver {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_matrix_sdk_ffi_91ce_SlidingSyncObserver_init_callback(foreignCallbackCallbackInterfaceSlidingSyncObserver, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<SlidingSyncObserver>()
}

extension FfiConverterCallbackInterfaceSlidingSyncObserver: FfiConverter {
    typealias SwiftType = SlidingSyncObserver
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

// Declaration and FfiConverters for SlidingSyncViewRoomItemsObserver Callback Interface

public protocol SlidingSyncViewRoomItemsObserver: AnyObject {
    func didReceiveUpdate()
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSlidingSyncViewRoomItemsObserver: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveUpdate(_ swiftCallbackInterface: SlidingSyncViewRoomItemsObserver, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didReceiveUpdate()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb: SlidingSyncViewRoomItemsObserver
        do {
            cb = try FfiConverterCallbackInterfaceSlidingSyncViewRoomItemsObserver.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("SlidingSyncViewRoomItemsObserver: Invalid handle")
            return -1
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceSlidingSyncViewRoomItemsObserver.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            do {
                out_buf.pointee = try invokeDidReceiveUpdate(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSlidingSyncViewRoomItemsObserver {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_matrix_sdk_ffi_91ce_SlidingSyncViewRoomItemsObserver_init_callback(foreignCallbackCallbackInterfaceSlidingSyncViewRoomItemsObserver, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<SlidingSyncViewRoomItemsObserver>()
}

extension FfiConverterCallbackInterfaceSlidingSyncViewRoomItemsObserver: FfiConverter {
    typealias SwiftType = SlidingSyncViewRoomItemsObserver
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

// Declaration and FfiConverters for SlidingSyncViewRoomListObserver Callback Interface

public protocol SlidingSyncViewRoomListObserver: AnyObject {
    func didReceiveUpdate(diff: SlidingSyncViewRoomsListDiff)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSlidingSyncViewRoomListObserver: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveUpdate(_ swiftCallbackInterface: SlidingSyncViewRoomListObserver, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.didReceiveUpdate(
                diff: try FfiConverterTypeSlidingSyncViewRoomsListDiff.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb: SlidingSyncViewRoomListObserver
        do {
            cb = try FfiConverterCallbackInterfaceSlidingSyncViewRoomListObserver.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("SlidingSyncViewRoomListObserver: Invalid handle")
            return -1
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceSlidingSyncViewRoomListObserver.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            do {
                out_buf.pointee = try invokeDidReceiveUpdate(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSlidingSyncViewRoomListObserver {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_matrix_sdk_ffi_91ce_SlidingSyncViewRoomListObserver_init_callback(foreignCallbackCallbackInterfaceSlidingSyncViewRoomListObserver, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<SlidingSyncViewRoomListObserver>()
}

extension FfiConverterCallbackInterfaceSlidingSyncViewRoomListObserver: FfiConverter {
    typealias SwiftType = SlidingSyncViewRoomListObserver
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

// Declaration and FfiConverters for SlidingSyncViewRoomsCountObserver Callback Interface

public protocol SlidingSyncViewRoomsCountObserver: AnyObject {
    func didReceiveUpdate(count: UInt32)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSlidingSyncViewRoomsCountObserver: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveUpdate(_ swiftCallbackInterface: SlidingSyncViewRoomsCountObserver, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.didReceiveUpdate(
                count: try FfiConverterUInt32.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb: SlidingSyncViewRoomsCountObserver
        do {
            cb = try FfiConverterCallbackInterfaceSlidingSyncViewRoomsCountObserver.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("SlidingSyncViewRoomsCountObserver: Invalid handle")
            return -1
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceSlidingSyncViewRoomsCountObserver.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            do {
                out_buf.pointee = try invokeDidReceiveUpdate(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSlidingSyncViewRoomsCountObserver {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_matrix_sdk_ffi_91ce_SlidingSyncViewRoomsCountObserver_init_callback(foreignCallbackCallbackInterfaceSlidingSyncViewRoomsCountObserver, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<SlidingSyncViewRoomsCountObserver>()
}

extension FfiConverterCallbackInterfaceSlidingSyncViewRoomsCountObserver: FfiConverter {
    typealias SwiftType = SlidingSyncViewRoomsCountObserver
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

// Declaration and FfiConverters for SlidingSyncViewStateObserver Callback Interface

public protocol SlidingSyncViewStateObserver: AnyObject {
    func didReceiveUpdate(newState: SlidingSyncState)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSlidingSyncViewStateObserver: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveUpdate(_ swiftCallbackInterface: SlidingSyncViewStateObserver, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.didReceiveUpdate(
                newState: try FfiConverterTypeSlidingSyncState.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb: SlidingSyncViewStateObserver
        do {
            cb = try FfiConverterCallbackInterfaceSlidingSyncViewStateObserver.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("SlidingSyncViewStateObserver: Invalid handle")
            return -1
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceSlidingSyncViewStateObserver.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            do {
                out_buf.pointee = try invokeDidReceiveUpdate(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSlidingSyncViewStateObserver {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_matrix_sdk_ffi_91ce_SlidingSyncViewStateObserver_init_callback(foreignCallbackCallbackInterfaceSlidingSyncViewStateObserver, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<SlidingSyncViewStateObserver>()
}

extension FfiConverterCallbackInterfaceSlidingSyncViewStateObserver: FfiConverter {
    typealias SwiftType = SlidingSyncViewStateObserver
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

// Declaration and FfiConverters for TimelineListener Callback Interface

public protocol TimelineListener: AnyObject {
    func onUpdate(update: TimelineDiff)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceTimelineListener: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeOnUpdate(_ swiftCallbackInterface: TimelineListener, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.onUpdate(
                update: try FfiConverterTypeTimelineDiff.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb: TimelineListener
        do {
            cb = try FfiConverterCallbackInterfaceTimelineListener.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("TimelineListener: Invalid handle")
            return -1
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceTimelineListener.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            do {
                out_buf.pointee = try invokeOnUpdate(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceTimelineListener {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_matrix_sdk_ffi_91ce_TimelineListener_init_callback(foreignCallbackCallbackInterfaceTimelineListener, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<TimelineListener>()
}

extension FfiConverterCallbackInterfaceTimelineListener: FfiConverter {
    typealias SwiftType = TimelineListener
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

private struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterUInt16.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterUInt32.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterUInt64.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterBool.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterString.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeEventTimelineItem: FfiConverterRustBuffer {
    typealias SwiftType = EventTimelineItem?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeEventTimelineItem.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeEventTimelineItem.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeHomeserverLoginDetails: FfiConverterRustBuffer {
    typealias SwiftType = HomeserverLoginDetails?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeHomeserverLoginDetails.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeHomeserverLoginDetails.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeMediaSource: FfiConverterRustBuffer {
    typealias SwiftType = MediaSource?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeMediaSource.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMediaSource.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeMessage: FfiConverterRustBuffer {
    typealias SwiftType = Message?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeMessage.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMessage.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRoom: FfiConverterRustBuffer {
    typealias SwiftType = Room?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeRoom.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRoom.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeSlidingSyncRoom: FfiConverterRustBuffer {
    typealias SwiftType = SlidingSyncRoom?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeSlidingSyncRoom.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSlidingSyncRoom.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeSlidingSyncView: FfiConverterRustBuffer {
    typealias SwiftType = SlidingSyncView?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeSlidingSyncView.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSlidingSyncView.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeTimelineItem: FfiConverterRustBuffer {
    typealias SwiftType = TimelineItem?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeTimelineItem.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTimelineItem.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeVirtualTimelineItem: FfiConverterRustBuffer {
    typealias SwiftType = VirtualTimelineItem?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeVirtualTimelineItem.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeVirtualTimelineItem.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeFormattedBody: FfiConverterRustBuffer {
    typealias SwiftType = FormattedBody?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeFormattedBody.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFormattedBody.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeImageInfo: FfiConverterRustBuffer {
    typealias SwiftType = ImageInfo?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeImageInfo.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeImageInfo.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeInsertAtData: FfiConverterRustBuffer {
    typealias SwiftType = InsertAtData?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeInsertAtData.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeInsertAtData.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeMoveData: FfiConverterRustBuffer {
    typealias SwiftType = MoveData?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeMoveData.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMoveData.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeNotificationItem: FfiConverterRustBuffer {
    typealias SwiftType = NotificationItem?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeNotificationItem.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNotificationItem.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRoomSubscription: FfiConverterRustBuffer {
    typealias SwiftType = RoomSubscription?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeRoomSubscription.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRoomSubscription.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeThumbnailInfo: FfiConverterRustBuffer {
    typealias SwiftType = ThumbnailInfo?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeThumbnailInfo.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeThumbnailInfo.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeUpdateAtData: FfiConverterRustBuffer {
    typealias SwiftType = UpdateAtData?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeUpdateAtData.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeUpdateAtData.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeMessageType: FfiConverterRustBuffer {
    typealias SwiftType = MessageType?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeMessageType.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMessageType.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypePushFormat: FfiConverterRustBuffer {
    typealias SwiftType = PushFormat?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypePushFormat.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePushFormat.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypePusherKind: FfiConverterRustBuffer {
    typealias SwiftType = PusherKind?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypePusherKind.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePusherKind.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceClientDelegate: FfiConverterRustBuffer {
    typealias SwiftType = ClientDelegate?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterCallbackInterfaceClientDelegate.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceClientDelegate.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceSessionVerificationControllerDelegate: FfiConverterRustBuffer {
    typealias SwiftType = SessionVerificationControllerDelegate?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceSessionVerificationControllerDelegate.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceSlidingSyncObserver: FfiConverterRustBuffer {
    typealias SwiftType = SlidingSyncObserver?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterCallbackInterfaceSlidingSyncObserver.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceSlidingSyncObserver.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionSequenceTypeTimelineItem: FfiConverterRustBuffer {
    typealias SwiftType = [TimelineItem]?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterSequenceTypeTimelineItem.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeTimelineItem.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionSequenceTypeRequiredState: FfiConverterRustBuffer {
    typealias SwiftType = [RequiredState]?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterSequenceTypeRequiredState.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeRequiredState.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    static func write(_ value: [UInt8], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterUInt8.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [UInt8] {
        let len: Int32 = try buf.readInt()
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    static func write(_ value: [String], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterString.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [String] {
        let len: Int32 = try buf.readInt()
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeRoom: FfiConverterRustBuffer {
    typealias SwiftType = [Room]

    static func write(_ value: [Room], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeRoom.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [Room] {
        let len: Int32 = try buf.readInt()
        var seq = [Room]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRoom.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeSessionVerificationEmoji: FfiConverterRustBuffer {
    typealias SwiftType = [SessionVerificationEmoji]

    static func write(_ value: [SessionVerificationEmoji], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeSessionVerificationEmoji.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [SessionVerificationEmoji] {
        let len: Int32 = try buf.readInt()
        var seq = [SessionVerificationEmoji]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSessionVerificationEmoji.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeTimelineItem: FfiConverterRustBuffer {
    typealias SwiftType = [TimelineItem]

    static func write(_ value: [TimelineItem], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeTimelineItem.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [TimelineItem] {
        let len: Int32 = try buf.readInt()
        var seq = [TimelineItem]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTimelineItem.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeReaction: FfiConverterRustBuffer {
    typealias SwiftType = [Reaction]

    static func write(_ value: [Reaction], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeReaction.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [Reaction] {
        let len: Int32 = try buf.readInt()
        var seq = [Reaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeReaction.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeRequiredState: FfiConverterRustBuffer {
    typealias SwiftType = [RequiredState]

    static func write(_ value: [RequiredState], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeRequiredState.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [RequiredState] {
        let len: Int32 = try buf.readInt()
        var seq = [RequiredState]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRequiredState.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeRoomListEntry: FfiConverterRustBuffer {
    typealias SwiftType = [RoomListEntry]

    static func write(_ value: [RoomListEntry], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeRoomListEntry.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [RoomListEntry] {
        let len: Int32 = try buf.readInt()
        var seq = [RoomListEntry]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRoomListEntry.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceOptionTypeSlidingSyncRoom: FfiConverterRustBuffer {
    typealias SwiftType = [SlidingSyncRoom?]

    static func write(_ value: [SlidingSyncRoom?], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterOptionTypeSlidingSyncRoom.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [SlidingSyncRoom?] {
        let len: Int32 = try buf.readInt()
        var seq = [SlidingSyncRoom?]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterOptionTypeSlidingSyncRoom.read(from: buf))
        }
        return seq
    }
}

public func genTransactionId() -> String {
    return try! FfiConverterString.lift(
        try!

            rustCall {
                _uniffi_matrix_sdk_ffi_gen_transaction_id_401c($0)
            }
    )
}

public func mediaSourceFromUrl(url: String) -> MediaSource {
    return try! FfiConverterTypeMediaSource.lift(
        try!

            rustCall {
                _uniffi_matrix_sdk_ffi_media_source_from_url_245(
                    FfiConverterString.lower(url), $0
                )
            }
    )
}

public func messageEventContentFromMarkdown(md: String) -> RoomMessageEventContent {
    return try! FfiConverterTypeRoomMessageEventContent.lift(
        try!

            rustCall {
                _uniffi_matrix_sdk_ffi_message_event_content_from_markdown_dc3(
                    FfiConverterString.lower(md), $0
                )
            }
    )
}

public func setupTracing(configuration: String) {
    try!

        rustCall {
            _uniffi_matrix_sdk_ffi_setup_tracing_89c1(
                FfiConverterString.lower(configuration), $0
            )
        }
}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum MatrixSdkFfiLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {}
}
