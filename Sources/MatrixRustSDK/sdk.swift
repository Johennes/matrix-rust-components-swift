// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation
import MatrixSDKFFIWrapper

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(sdkFFI)
    import sdkFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_sdk_2c68_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_sdk_2c68_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Types conforming to `Serializable` can be read and written in a bytebuffer.
private protocol Serializable {
    func write(into: Writer)
    static func read(from: Reader) throws -> Self
}

// Types confirming to `ViaFfi` can be transferred back-and-for over the FFI.
// This is analogous to the Rust trait of the same name.
private protocol ViaFfi: Serializable {
    associatedtype FfiType
    static func lift(_ v: FfiType) throws -> Self
    func lower() -> FfiType
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol Primitive {}

private extension Primitive {
    typealias FfiType = Self

    static func lift(_ v: Self) throws -> Self {
        return v
    }

    func lower() -> Self {
        return self
    }
}

// Types conforming to `ViaFfiUsingByteBuffer` lift and lower into a bytebuffer.
// Use this for complex types where it's hard to write a custom lift/lower.
private protocol ViaFfiUsingByteBuffer: Serializable {}

private extension ViaFfiUsingByteBuffer {
    typealias FfiType = RustBuffer

    static func lift(_ buf: FfiType) throws -> Self {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try Self.read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    func lower() -> FfiType {
        let writer = Writer()
        write(into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, E: ViaFfiUsingByteBuffer & Error>(_: E.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: { try E.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try String.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Protocols for converters we'll implement in templates

private protocol FfiConverter {
    associatedtype SwiftType
    associatedtype FfiType

    static func lift(_ ffiValue: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType

    static func read(from: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into: Writer)
}

private protocol FfiConverterUsingByteBuffer: FfiConverter where FfiType == RustBuffer {
    // Empty, because we want to declare some helper methods in the extension below.
}

extension FfiConverterUsingByteBuffer {
    static func lower(_ value: SwiftType) -> FfiType {
        let writer = Writer()
        Self.write(value, into: writer)
        return RustBuffer(bytes: writer.bytes)
    }

    static func lift(_ buf: FfiType) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try Self.read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }
}

// Helpers for structural types. Note that because of canonical_names, it /should/ be impossible
// to make another `FfiConverterSequence` etc just using the UDL.
private enum FfiConverterSequence {
    static func write<T>(_ value: [T], into buf: Writer, writeItem: (T, Writer) -> Void) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            writeItem(item, buf)
        }
    }

    static func read<T>(from buf: Reader, readItem: (Reader) throws -> T) throws -> [T] {
        let len: Int32 = try buf.readInt()
        var seq = [T]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try readItem(buf))
        }
        return seq
    }
}

private enum FfiConverterOptional {
    static func write<T>(_ value: T?, into buf: Writer, writeItem: (T, Writer) -> Void) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        writeItem(value, buf)
    }

    static func read<T>(from buf: Reader, readItem: (Reader) throws -> T) throws -> T? {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try readItem(buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private enum FfiConverterDictionary {
    static func write<T>(_ value: [String: T], into buf: Writer, writeItem: (String, T, Writer) -> Void) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for (key, value) in value {
            writeItem(key, value, buf)
        }
    }

    static func read<T>(from buf: Reader, readItem: (Reader) throws -> (String, T)) throws -> [String: T] {
        let len: Int32 = try buf.readInt()
        var dict = [String: T]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let (key, value) = try readItem(buf)
            dict[key] = value
        }
        return dict
    }
}

// Public interface members begin here.

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias Handle = UInt64
private class ConcurrentHandleMap<T> {
    private var leftMap: [Handle: T] = [:]
    private var counter: [Handle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: Handle] = [:]

    private let lock = NSLock()
    private var currentHandle: Handle = 0
    private let stride: Handle = 1

    func insert(obj: T) -> Handle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: Handle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: Handle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: Handle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0

private class FfiConverterCallbackInterface<CallbackInterface> {
    fileprivate let handleMap = ConcurrentHandleMap<CallbackInterface>()

    func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    func lift(_ handle: Handle) throws -> CallbackInterface {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    func read(from buf: Reader) throws -> CallbackInterface {
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    func lower(_ v: CallbackInterface) -> Handle {
        let handle = handleMap.insert(obj: v)
        return handle
        // assert(handleMap.get(handle: obj) == v, "Handle map is not returning the object we just placed there. This is a bug in the HandleMap.")
    }

    func write(_ v: CallbackInterface, into buf: Writer) {
        buf.writeInt(lower(v))
    }
}

public func loginNewClient(basePath: String, username: String, password: String) throws -> Client {
    let _retval = try

        rustCallWithError(ClientError.self) {
            sdk_2c68_login_new_client(basePath.lower(), username.lower(), password.lower(), $0)
        }
    return try Client.lift(_retval)
}

public func guestClient(basePath: String, homeserver: String) throws -> Client {
    let _retval = try

        rustCallWithError(ClientError.self) {
            sdk_2c68_guest_client(basePath.lower(), homeserver.lower(), $0)
        }
    return try Client.lift(_retval)
}

public func loginWithToken(basePath: String, restoreToken: String) throws -> Client {
    let _retval = try

        rustCallWithError(ClientError.self) {
            sdk_2c68_login_with_token(basePath.lower(), restoreToken.lower(), $0)
        }
    return try Client.lift(_retval)
}

public func mediaSourceFromUrl(url: String) -> MediaSource {
    let _retval = try!

        rustCall {
            sdk_2c68_media_source_from_url(url.lower(), $0)
        }
    return try! MediaSource.lift(_retval)
}

public protocol ClientProtocol {
    func setDelegate(delegate: ClientDelegate?)
    func startSync()
    func restoreToken() throws -> String
    func isGuest() -> Bool
    func hasFirstSynced() -> Bool
    func isSyncing() -> Bool
    func userId() throws -> String
    func displayName() throws -> String
    func avatarUrl() throws -> String
    func deviceId() throws -> String
    func rooms() -> [Room]
    func loadImage(source: MediaSource) throws -> [UInt8]
}

public class Client: ClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_Client_object_free(pointer, $0) }
    }

    public func setDelegate(delegate: ClientDelegate?) {
        try!
            rustCall {
                sdk_2c68_Client_set_delegate(self.pointer, FfiConverterOptionCallbackInterfaceClientDelegate.lower(delegate), $0)
            }
    }

    public func startSync() {
        try!
            rustCall {
                sdk_2c68_Client_start_sync(self.pointer, $0)
            }
    }

    public func restoreToken() throws -> String {
        let _retval = try
            rustCallWithError(ClientError.self) {
                sdk_2c68_Client_restore_token(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func isGuest() -> Bool {
        let _retval = try!
            rustCall {
                sdk_2c68_Client_is_guest(self.pointer, $0)
            }
        return try! Bool.lift(_retval)
    }

    public func hasFirstSynced() -> Bool {
        let _retval = try!
            rustCall {
                sdk_2c68_Client_has_first_synced(self.pointer, $0)
            }
        return try! Bool.lift(_retval)
    }

    public func isSyncing() -> Bool {
        let _retval = try!
            rustCall {
                sdk_2c68_Client_is_syncing(self.pointer, $0)
            }
        return try! Bool.lift(_retval)
    }

    public func userId() throws -> String {
        let _retval = try
            rustCallWithError(ClientError.self) {
                sdk_2c68_Client_user_id(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func displayName() throws -> String {
        let _retval = try
            rustCallWithError(ClientError.self) {
                sdk_2c68_Client_display_name(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func avatarUrl() throws -> String {
        let _retval = try
            rustCallWithError(ClientError.self) {
                sdk_2c68_Client_avatar_url(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func deviceId() throws -> String {
        let _retval = try
            rustCallWithError(ClientError.self) {
                sdk_2c68_Client_device_id(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func rooms() -> [Room] {
        let _retval = try!
            rustCall {
                sdk_2c68_Client_rooms(self.pointer, $0)
            }
        return try! FfiConverterSequenceObjectRoom.lift(_retval)
    }

    public func loadImage(source: MediaSource) throws -> [UInt8] {
        let _retval = try
            rustCallWithError(ClientError.self) {
                sdk_2c68_Client_load_image(self.pointer, source.lower(), $0)
            }
        return try FfiConverterSequenceUInt8.lift(_retval)
    }
}

private extension Client {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension Client: ViaFfi, Serializable {}

public protocol RoomProtocol {
    func setDelegate(delegate: RoomDelegate?)
    func id() -> String
    func displayName() throws -> String
    func avatarUrl() -> String?
    func memberAvatarUrl(userId: String) throws -> String?
    func memberDisplayName(userId: String) throws -> String?
    func isDirect() -> Bool
    func isPublic() -> Bool
    func isSpace() -> Bool
    func isEncrypted() -> Bool
    func isTombstoned() -> Bool
    func name() -> String?
    func topic() -> String?
    func startLiveEventListener() -> BackwardsStream?
    func stopLiveEventListener()
}

public class Room: RoomProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_Room_object_free(pointer, $0) }
    }

    public func setDelegate(delegate: RoomDelegate?) {
        try!
            rustCall {
                sdk_2c68_Room_set_delegate(self.pointer, FfiConverterOptionCallbackInterfaceRoomDelegate.lower(delegate), $0)
            }
    }

    public func id() -> String {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_id(self.pointer, $0)
            }
        return try! String.lift(_retval)
    }

    public func displayName() throws -> String {
        let _retval = try
            rustCallWithError(ClientError.self) {
                sdk_2c68_Room_display_name(self.pointer, $0)
            }
        return try String.lift(_retval)
    }

    public func avatarUrl() -> String? {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_avatar_url(self.pointer, $0)
            }
        return try! FfiConverterOptionString.lift(_retval)
    }

    public func memberAvatarUrl(userId: String) throws -> String? {
        let _retval = try
            rustCallWithError(ClientError.self) {
                sdk_2c68_Room_member_avatar_url(self.pointer, userId.lower(), $0)
            }
        return try FfiConverterOptionString.lift(_retval)
    }

    public func memberDisplayName(userId: String) throws -> String? {
        let _retval = try
            rustCallWithError(ClientError.self) {
                sdk_2c68_Room_member_display_name(self.pointer, userId.lower(), $0)
            }
        return try FfiConverterOptionString.lift(_retval)
    }

    public func isDirect() -> Bool {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_is_direct(self.pointer, $0)
            }
        return try! Bool.lift(_retval)
    }

    public func isPublic() -> Bool {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_is_public(self.pointer, $0)
            }
        return try! Bool.lift(_retval)
    }

    public func isSpace() -> Bool {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_is_space(self.pointer, $0)
            }
        return try! Bool.lift(_retval)
    }

    public func isEncrypted() -> Bool {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_is_encrypted(self.pointer, $0)
            }
        return try! Bool.lift(_retval)
    }

    public func isTombstoned() -> Bool {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_is_tombstoned(self.pointer, $0)
            }
        return try! Bool.lift(_retval)
    }

    public func name() -> String? {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_name(self.pointer, $0)
            }
        return try! FfiConverterOptionString.lift(_retval)
    }

    public func topic() -> String? {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_topic(self.pointer, $0)
            }
        return try! FfiConverterOptionString.lift(_retval)
    }

    public func startLiveEventListener() -> BackwardsStream? {
        let _retval = try!
            rustCall {
                sdk_2c68_Room_start_live_event_listener(self.pointer, $0)
            }
        return try! FfiConverterOptionObjectBackwardsStream.lift(_retval)
    }

    public func stopLiveEventListener() {
        try!
            rustCall {
                sdk_2c68_Room_stop_live_event_listener(self.pointer, $0)
            }
    }
}

private extension Room {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension Room: ViaFfi, Serializable {}

public protocol BackwardsStreamProtocol {
    func paginateBackwards(count: UInt64) -> [AnyMessage]
}

public class BackwardsStream: BackwardsStreamProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_BackwardsStream_object_free(pointer, $0) }
    }

    public func paginateBackwards(count: UInt64) -> [AnyMessage] {
        let _retval = try!
            rustCall {
                sdk_2c68_BackwardsStream_paginate_backwards(self.pointer, count.lower(), $0)
            }
        return try! FfiConverterSequenceObjectAnyMessage.lift(_retval)
    }
}

private extension BackwardsStream {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension BackwardsStream: ViaFfi, Serializable {}

public protocol AnyMessageProtocol {
    func textMessage() -> TextMessage?
    func imageMessage() -> ImageMessage?
    func noticeMessage() -> NoticeMessage?
    func emoteMessage() -> EmoteMessage?
}

public class AnyMessage: AnyMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_AnyMessage_object_free(pointer, $0) }
    }

    public func textMessage() -> TextMessage? {
        let _retval = try!
            rustCall {
                sdk_2c68_AnyMessage_text_message(self.pointer, $0)
            }
        return try! FfiConverterOptionObjectTextMessage.lift(_retval)
    }

    public func imageMessage() -> ImageMessage? {
        let _retval = try!
            rustCall {
                sdk_2c68_AnyMessage_image_message(self.pointer, $0)
            }
        return try! FfiConverterOptionObjectImageMessage.lift(_retval)
    }

    public func noticeMessage() -> NoticeMessage? {
        let _retval = try!
            rustCall {
                sdk_2c68_AnyMessage_notice_message(self.pointer, $0)
            }
        return try! FfiConverterOptionObjectNoticeMessage.lift(_retval)
    }

    public func emoteMessage() -> EmoteMessage? {
        let _retval = try!
            rustCall {
                sdk_2c68_AnyMessage_emote_message(self.pointer, $0)
            }
        return try! FfiConverterOptionObjectEmoteMessage.lift(_retval)
    }
}

private extension AnyMessage {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension AnyMessage: ViaFfi, Serializable {}

public protocol BaseMessageProtocol {
    func id() -> String
    func body() -> String
    func sender() -> String
    func originServerTs() -> UInt64
}

public class BaseMessage: BaseMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_BaseMessage_object_free(pointer, $0) }
    }

    public func id() -> String {
        let _retval = try!
            rustCall {
                sdk_2c68_BaseMessage_id(self.pointer, $0)
            }
        return try! String.lift(_retval)
    }

    public func body() -> String {
        let _retval = try!
            rustCall {
                sdk_2c68_BaseMessage_body(self.pointer, $0)
            }
        return try! String.lift(_retval)
    }

    public func sender() -> String {
        let _retval = try!
            rustCall {
                sdk_2c68_BaseMessage_sender(self.pointer, $0)
            }
        return try! String.lift(_retval)
    }

    public func originServerTs() -> UInt64 {
        let _retval = try!
            rustCall {
                sdk_2c68_BaseMessage_origin_server_ts(self.pointer, $0)
            }
        return try! UInt64.lift(_retval)
    }
}

private extension BaseMessage {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension BaseMessage: ViaFfi, Serializable {}

public protocol TextMessageProtocol {
    func baseMessage() -> BaseMessage
    func htmlBody() -> String?
}

public class TextMessage: TextMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_TextMessage_object_free(pointer, $0) }
    }

    public func baseMessage() -> BaseMessage {
        let _retval = try!
            rustCall {
                sdk_2c68_TextMessage_base_message(self.pointer, $0)
            }
        return try! BaseMessage.lift(_retval)
    }

    public func htmlBody() -> String? {
        let _retval = try!
            rustCall {
                sdk_2c68_TextMessage_html_body(self.pointer, $0)
            }
        return try! FfiConverterOptionString.lift(_retval)
    }
}

private extension TextMessage {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension TextMessage: ViaFfi, Serializable {}

public protocol ImageMessageProtocol {
    func baseMessage() -> BaseMessage
    func source() -> MediaSource
    func width() -> UInt64?
    func height() -> UInt64?
    func blurhash() -> String?
}

public class ImageMessage: ImageMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_ImageMessage_object_free(pointer, $0) }
    }

    public func baseMessage() -> BaseMessage {
        let _retval = try!
            rustCall {
                sdk_2c68_ImageMessage_base_message(self.pointer, $0)
            }
        return try! BaseMessage.lift(_retval)
    }

    public func source() -> MediaSource {
        let _retval = try!
            rustCall {
                sdk_2c68_ImageMessage_source(self.pointer, $0)
            }
        return try! MediaSource.lift(_retval)
    }

    public func width() -> UInt64? {
        let _retval = try!
            rustCall {
                sdk_2c68_ImageMessage_width(self.pointer, $0)
            }
        return try! FfiConverterOptionUInt64.lift(_retval)
    }

    public func height() -> UInt64? {
        let _retval = try!
            rustCall {
                sdk_2c68_ImageMessage_height(self.pointer, $0)
            }
        return try! FfiConverterOptionUInt64.lift(_retval)
    }

    public func blurhash() -> String? {
        let _retval = try!
            rustCall {
                sdk_2c68_ImageMessage_blurhash(self.pointer, $0)
            }
        return try! FfiConverterOptionString.lift(_retval)
    }
}

private extension ImageMessage {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension ImageMessage: ViaFfi, Serializable {}

public protocol NoticeMessageProtocol {
    func baseMessage() -> BaseMessage
    func htmlBody() -> String?
}

public class NoticeMessage: NoticeMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_NoticeMessage_object_free(pointer, $0) }
    }

    public func baseMessage() -> BaseMessage {
        let _retval = try!
            rustCall {
                sdk_2c68_NoticeMessage_base_message(self.pointer, $0)
            }
        return try! BaseMessage.lift(_retval)
    }

    public func htmlBody() -> String? {
        let _retval = try!
            rustCall {
                sdk_2c68_NoticeMessage_html_body(self.pointer, $0)
            }
        return try! FfiConverterOptionString.lift(_retval)
    }
}

private extension NoticeMessage {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension NoticeMessage: ViaFfi, Serializable {}

public protocol EmoteMessageProtocol {
    func baseMessage() -> BaseMessage
    func htmlBody() -> String?
}

public class EmoteMessage: EmoteMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_EmoteMessage_object_free(pointer, $0) }
    }

    public func baseMessage() -> BaseMessage {
        let _retval = try!
            rustCall {
                sdk_2c68_EmoteMessage_base_message(self.pointer, $0)
            }
        return try! BaseMessage.lift(_retval)
    }

    public func htmlBody() -> String? {
        let _retval = try!
            rustCall {
                sdk_2c68_EmoteMessage_html_body(self.pointer, $0)
            }
        return try! FfiConverterOptionString.lift(_retval)
    }
}

private extension EmoteMessage {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension EmoteMessage: ViaFfi, Serializable {}

public protocol MediaSourceProtocol {
    func url() -> String
}

public class MediaSource: MediaSourceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_2c68_MediaSource_object_free(pointer, $0) }
    }

    public func url() -> String {
        let _retval = try!
            rustCall {
                sdk_2c68_MediaSource_url(self.pointer, $0)
            }
        return try! String.lift(_retval)
    }
}

private extension MediaSource {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension MediaSource: ViaFfi, Serializable {}

public enum ClientError {
    case Generic(msg: String)
}

extension ClientError: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> ClientError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .Generic(
                msg: try String.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .Generic(msg):
            buf.writeInt(Int32(1))
            msg.write(into: buf)
        }
    }
}

extension ClientError: Equatable, Hashable {}

extension ClientError: Error {}

// Declaration and FfiConverters for ClientDelegate Callback Interface

public protocol ClientDelegate: AnyObject {
    func didReceiveSyncUpdate()
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceClientDelegate: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveSyncUpdate(_ swiftCallbackInterface: ClientDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            swiftCallbackInterface.didReceiveSyncUpdate()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb = try! ffiConverterCallbackInterfaceClientDelegate.lift(handle)
        switch method {
        case IDX_CALLBACK_FREE:
            ffiConverterCallbackInterfaceClientDelegate.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            let buffer = try! invokeDidReceiveSyncUpdate(cb, args)
            out_buf.pointee = buffer
            // Value written to out buffer.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 1

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
private let ffiConverterCallbackInterfaceClientDelegate: FfiConverterCallbackInterface<ClientDelegate> = {
    try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
        ffi_sdk_2c68_ClientDelegate_init_callback(foreignCallbackCallbackInterfaceClientDelegate, err)
    }
    return FfiConverterCallbackInterface<ClientDelegate>()
}()

// Declaration and FfiConverters for RoomDelegate Callback Interface

public protocol RoomDelegate: AnyObject {
    func didReceiveMessage(message: AnyMessage)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceRoomDelegate: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveMessage(_ swiftCallbackInterface: RoomDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.didReceiveMessage(
                message: try AnyMessage.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb = try! ffiConverterCallbackInterfaceRoomDelegate.lift(handle)
        switch method {
        case IDX_CALLBACK_FREE:
            ffiConverterCallbackInterfaceRoomDelegate.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            let buffer = try! invokeDidReceiveMessage(cb, args)
            out_buf.pointee = buffer
            // Value written to out buffer.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 1

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
private let ffiConverterCallbackInterfaceRoomDelegate: FfiConverterCallbackInterface<RoomDelegate> = {
    try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
        ffi_sdk_2c68_RoomDelegate_init_callback(foreignCallbackCallbackInterfaceRoomDelegate, err)
    }
    return FfiConverterCallbackInterface<RoomDelegate>()
}()

extension UInt8: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Self {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension UInt64: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Self {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension Bool: ViaFfi {
    fileprivate typealias FfiType = Int8

    fileprivate static func read(from buf: Reader) throws -> Self {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }

    fileprivate static func lift(_ v: FfiType) throws -> Self {
        return v != 0
    }

    fileprivate func lower() -> FfiType {
        return self ? 1 : 0
    }
}

extension String: ViaFfi {
    fileprivate typealias FfiType = RustBuffer

    fileprivate static func lift(_ v: FfiType) throws -> Self {
        defer {
            v.deallocate()
        }
        if v.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: v.data!, count: Int(v.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    fileprivate func lower() -> FfiType {
        return utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(utf8.count)
        buf.writeInt(len)
        buf.writeBytes(utf8)
    }
}

// Helper code for AnyMessage class is found in ObjectTemplate.swift
// Helper code for BackwardsStream class is found in ObjectTemplate.swift
// Helper code for BaseMessage class is found in ObjectTemplate.swift
// Helper code for Client class is found in ObjectTemplate.swift
// Helper code for EmoteMessage class is found in ObjectTemplate.swift
// Helper code for ImageMessage class is found in ObjectTemplate.swift
// Helper code for MediaSource class is found in ObjectTemplate.swift
// Helper code for NoticeMessage class is found in ObjectTemplate.swift
// Helper code for Room class is found in ObjectTemplate.swift
// Helper code for TextMessage class is found in ObjectTemplate.swift
// Helper code for ClientError error is found in ErrorTemplate.swift

private enum FfiConverterOptionUInt64: FfiConverterUsingByteBuffer {
    typealias SwiftType = UInt64?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try UInt64.read(from: buf)
        }
    }
}

private enum FfiConverterOptionString: FfiConverterUsingByteBuffer {
    typealias SwiftType = String?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try String.read(from: buf)
        }
    }
}

private enum FfiConverterOptionObjectBackwardsStream: FfiConverterUsingByteBuffer {
    typealias SwiftType = BackwardsStream?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try BackwardsStream.read(from: buf)
        }
    }
}

private enum FfiConverterOptionObjectEmoteMessage: FfiConverterUsingByteBuffer {
    typealias SwiftType = EmoteMessage?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try EmoteMessage.read(from: buf)
        }
    }
}

private enum FfiConverterOptionObjectImageMessage: FfiConverterUsingByteBuffer {
    typealias SwiftType = ImageMessage?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try ImageMessage.read(from: buf)
        }
    }
}

private enum FfiConverterOptionObjectNoticeMessage: FfiConverterUsingByteBuffer {
    typealias SwiftType = NoticeMessage?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try NoticeMessage.read(from: buf)
        }
    }
}

private enum FfiConverterOptionObjectTextMessage: FfiConverterUsingByteBuffer {
    typealias SwiftType = TextMessage?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try TextMessage.read(from: buf)
        }
    }
}

private enum FfiConverterOptionCallbackInterfaceClientDelegate: FfiConverterUsingByteBuffer {
    typealias SwiftType = ClientDelegate?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            ffiConverterCallbackInterfaceClientDelegate.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try ffiConverterCallbackInterfaceClientDelegate.read(from: buf)
        }
    }
}

private enum FfiConverterOptionCallbackInterfaceRoomDelegate: FfiConverterUsingByteBuffer {
    typealias SwiftType = RoomDelegate?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            ffiConverterCallbackInterfaceRoomDelegate.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try ffiConverterCallbackInterfaceRoomDelegate.read(from: buf)
        }
    }
}

private enum FfiConverterSequenceUInt8: FfiConverterUsingByteBuffer {
    typealias SwiftType = [UInt8]

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterSequence.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterSequence.read(from: buf) { buf in
            try UInt8.read(from: buf)
        }
    }
}

private enum FfiConverterSequenceObjectAnyMessage: FfiConverterUsingByteBuffer {
    typealias SwiftType = [AnyMessage]

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterSequence.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterSequence.read(from: buf) { buf in
            try AnyMessage.read(from: buf)
        }
    }
}

private enum FfiConverterSequenceObjectRoom: FfiConverterUsingByteBuffer {
    typealias SwiftType = [Room]

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterSequence.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterSequence.read(from: buf) { buf in
            try Room.read(from: buf)
        }
    }
}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum SdkLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
        // No initialization code needed
    }
}
