// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(sdkFFI)
    import sdkFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_sdk_22ae_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_sdk_22ae_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
        let writer = Writer()
        write(value, into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
(_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
{
    try makeRustCall(callback, errorHandler: { try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias Handle = UInt64
private class ConcurrentHandleMap<T> {
    private var leftMap: [Handle: T] = [:]
    private var counter: [Handle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: Handle] = [:]

    private let lock = NSLock()
    private var currentHandle: Handle = 0
    private let stride: Handle = 1

    func insert(obj: T) -> Handle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: Handle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: Handle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: Handle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Membership {
    case invited
    case joined
    case left
}

private struct FfiConverterTypeMembership: FfiConverterRustBuffer {
    typealias SwiftType = Membership

    static func read(from buf: Reader) throws -> Membership {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .invited

        case 2: return .joined

        case 3: return .left

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: Membership, into buf: Writer) {
        switch value {
        case .invited:
            buf.writeInt(Int32(1))

        case .joined:
            buf.writeInt(Int32(2))

        case .left:
            buf.writeInt(Int32(3))
        }
    }
}

extension Membership: Equatable, Hashable {}

public func setupTracing(configuration: String) {
    try!

        rustCall {
            sdk_22ae_setup_tracing(
                FfiConverterString.lower(configuration), $0
            )
        }
}

public func mediaSourceFromUrl(url: String) -> MediaSource {
    return try! FfiConverterTypeMediaSource.lift(
        try!

            rustCall {
                sdk_22ae_media_source_from_url(
                    FfiConverterString.lower(url), $0
                )
            }
    )
}

public func messageEventContentFromMarkdown(md: String) -> MessageEventContent {
    return try! FfiConverterTypeMessageEventContent.lift(
        try!

            rustCall {
                sdk_22ae_message_event_content_from_markdown(
                    FfiConverterString.lower(md), $0
                )
            }
    )
}

public func genTransactionId() -> String {
    return try! FfiConverterString.lift(
        try!

            rustCall {
                sdk_22ae_gen_transaction_id($0)
            }
    )
}

public protocol ClientBuilderProtocol {
    func basePath(path: String) -> ClientBuilder
    func username(username: String) -> ClientBuilder
    func homeserverUrl(url: String) -> ClientBuilder
    func build() throws -> Client
}

public class ClientBuilder: ClientBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                sdk_22ae_ClientBuilder_new($0)
            })
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_ClientBuilder_object_free(pointer, $0) }
    }

    public func basePath(path: String) -> ClientBuilder {
        return try! FfiConverterTypeClientBuilder.lift(
            try!
                rustCall {
                    sdk_22ae_ClientBuilder_base_path(self.pointer,
                                                     FfiConverterString.lower(path), $0)
                }
        )
    }

    public func username(username: String) -> ClientBuilder {
        return try! FfiConverterTypeClientBuilder.lift(
            try!
                rustCall {
                    sdk_22ae_ClientBuilder_username(self.pointer,
                                                    FfiConverterString.lower(username), $0)
                }
        )
    }

    public func homeserverUrl(url: String) -> ClientBuilder {
        return try! FfiConverterTypeClientBuilder.lift(
            try!
                rustCall {
                    sdk_22ae_ClientBuilder_homeserver_url(self.pointer,
                                                          FfiConverterString.lower(url), $0)
                }
        )
    }

    public func build() throws -> Client {
        return try FfiConverterTypeClient.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_ClientBuilder_build(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeClientBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ClientBuilder

    static func read(from buf: Reader) throws -> ClientBuilder {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: ClientBuilder, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ClientBuilder {
        return ClientBuilder(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: ClientBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol ClientProtocol {
    func setDelegate(delegate: ClientDelegate?)
    func login(username: String, password: String) throws
    func restoreLogin(restoreToken: String) throws
    func homeserver() -> String
    func startSync(timelineLimit: UInt16?)
    func restoreToken() throws -> String
    func isGuest() -> Bool
    func hasFirstSynced() -> Bool
    func isSyncing() -> Bool
    func userId() throws -> String
    func displayName() throws -> String
    func avatarUrl() throws -> String
    func deviceId() throws -> String
    func rooms() -> [Room]
    func getMediaContent(source: MediaSource) throws -> [UInt8]
    func getSessionVerificationController() throws -> SessionVerificationController
}

public class Client: ClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_Client_object_free(pointer, $0) }
    }

    public func setDelegate(delegate: ClientDelegate?) {
        try!
            rustCall {
                sdk_22ae_Client_set_delegate(self.pointer,
                                             FfiConverterOptionCallbackInterfaceClientDelegate.lower(delegate), $0)
            }
    }

    public func login(username: String, password: String) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                sdk_22ae_Client_login(self.pointer,
                                      FfiConverterString.lower(username),
                                      FfiConverterString.lower(password), $0)
            }
    }

    public func restoreLogin(restoreToken: String) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                sdk_22ae_Client_restore_login(self.pointer,
                                              FfiConverterString.lower(restoreToken), $0)
            }
    }

    public func homeserver() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    sdk_22ae_Client_homeserver(self.pointer, $0)
                }
        )
    }

    public func startSync(timelineLimit: UInt16?) {
        try!
            rustCall {
                sdk_22ae_Client_start_sync(self.pointer,
                                           FfiConverterOptionUInt16.lower(timelineLimit), $0)
            }
    }

    public func restoreToken() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Client_restore_token(self.pointer, $0)
                }
        )
    }

    public func isGuest() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_Client_is_guest(self.pointer, $0)
                }
        )
    }

    public func hasFirstSynced() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_Client_has_first_synced(self.pointer, $0)
                }
        )
    }

    public func isSyncing() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_Client_is_syncing(self.pointer, $0)
                }
        )
    }

    public func userId() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Client_user_id(self.pointer, $0)
                }
        )
    }

    public func displayName() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Client_display_name(self.pointer, $0)
                }
        )
    }

    public func avatarUrl() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Client_avatar_url(self.pointer, $0)
                }
        )
    }

    public func deviceId() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Client_device_id(self.pointer, $0)
                }
        )
    }

    public func rooms() -> [Room] {
        return try! FfiConverterSequenceTypeRoom.lift(
            try!
                rustCall {
                    sdk_22ae_Client_rooms(self.pointer, $0)
                }
        )
    }

    public func getMediaContent(source: MediaSource) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Client_get_media_content(self.pointer,
                                                      FfiConverterTypeMediaSource.lower(source), $0)
                }
        )
    }

    public func getSessionVerificationController() throws -> SessionVerificationController {
        return try FfiConverterTypeSessionVerificationController.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Client_get_session_verification_controller(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Client

    static func read(from buf: Reader) throws -> Client {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Client, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
        return Client(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Client) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol RoomProtocol {
    func setDelegate(delegate: RoomDelegate?)
    func id() -> String
    func name() -> String?
    func topic() -> String?
    func avatarUrl() -> String?
    func membership() -> Membership
    func isDirect() -> Bool
    func isPublic() -> Bool
    func isSpace() -> Bool
    func isEncrypted() -> Bool
    func isTombstoned() -> Bool
    func displayName() throws -> String
    func memberAvatarUrl(userId: String) throws -> String?
    func memberDisplayName(userId: String) throws -> String?
    func startLiveEventListener() -> BackwardsStream?
    func stopLiveEventListener()
    func send(msg: MessageEventContent, txnId: String?) throws
}

public class Room: RoomProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_Room_object_free(pointer, $0) }
    }

    public func setDelegate(delegate: RoomDelegate?) {
        try!
            rustCall {
                sdk_22ae_Room_set_delegate(self.pointer,
                                           FfiConverterOptionCallbackInterfaceRoomDelegate.lower(delegate), $0)
            }
    }

    public func id() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    sdk_22ae_Room_id(self.pointer, $0)
                }
        )
    }

    public func name() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    sdk_22ae_Room_name(self.pointer, $0)
                }
        )
    }

    public func topic() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    sdk_22ae_Room_topic(self.pointer, $0)
                }
        )
    }

    public func avatarUrl() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    sdk_22ae_Room_avatar_url(self.pointer, $0)
                }
        )
    }

    public func membership() -> Membership {
        return try! FfiConverterTypeMembership.lift(
            try!
                rustCall {
                    sdk_22ae_Room_membership(self.pointer, $0)
                }
        )
    }

    public func isDirect() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_Room_is_direct(self.pointer, $0)
                }
        )
    }

    public func isPublic() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_Room_is_public(self.pointer, $0)
                }
        )
    }

    public func isSpace() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_Room_is_space(self.pointer, $0)
                }
        )
    }

    public func isEncrypted() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_Room_is_encrypted(self.pointer, $0)
                }
        )
    }

    public func isTombstoned() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_Room_is_tombstoned(self.pointer, $0)
                }
        )
    }

    public func displayName() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Room_display_name(self.pointer, $0)
                }
        )
    }

    public func memberAvatarUrl(userId: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Room_member_avatar_url(self.pointer,
                                                    FfiConverterString.lower(userId), $0)
                }
        )
    }

    public func memberDisplayName(userId: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
                rustCallWithError(FfiConverterTypeClientError.self) {
                    sdk_22ae_Room_member_display_name(self.pointer,
                                                      FfiConverterString.lower(userId), $0)
                }
        )
    }

    public func startLiveEventListener() -> BackwardsStream? {
        return try! FfiConverterOptionTypeBackwardsStream.lift(
            try!
                rustCall {
                    sdk_22ae_Room_start_live_event_listener(self.pointer, $0)
                }
        )
    }

    public func stopLiveEventListener() {
        try!
            rustCall {
                sdk_22ae_Room_stop_live_event_listener(self.pointer, $0)
            }
    }

    public func send(msg: MessageEventContent, txnId: String?) throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                sdk_22ae_Room_send(self.pointer,
                                   FfiConverterTypeMessageEventContent.lower(msg),
                                   FfiConverterOptionString.lower(txnId), $0)
            }
    }
}

private struct FfiConverterTypeRoom: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Room

    static func read(from buf: Reader) throws -> Room {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Room, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Room {
        return Room(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Room) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol BackwardsStreamProtocol {
    func paginateBackwards(count: UInt64) -> [AnyMessage]
}

public class BackwardsStream: BackwardsStreamProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_BackwardsStream_object_free(pointer, $0) }
    }

    public func paginateBackwards(count: UInt64) -> [AnyMessage] {
        return try! FfiConverterSequenceTypeAnyMessage.lift(
            try!
                rustCall {
                    sdk_22ae_BackwardsStream_paginate_backwards(self.pointer,
                                                                FfiConverterUInt64.lower(count), $0)
                }
        )
    }
}

private struct FfiConverterTypeBackwardsStream: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BackwardsStream

    static func read(from buf: Reader) throws -> BackwardsStream {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: BackwardsStream, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BackwardsStream {
        return BackwardsStream(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: BackwardsStream) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol MessageEventContentProtocol {}

public class MessageEventContent: MessageEventContentProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_MessageEventContent_object_free(pointer, $0) }
    }
}

private struct FfiConverterTypeMessageEventContent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MessageEventContent

    static func read(from buf: Reader) throws -> MessageEventContent {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: MessageEventContent, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MessageEventContent {
        return MessageEventContent(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: MessageEventContent) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol AnyMessageProtocol {
    func textMessage() -> TextMessage?
    func imageMessage() -> ImageMessage?
    func noticeMessage() -> NoticeMessage?
    func emoteMessage() -> EmoteMessage?
}

public class AnyMessage: AnyMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_AnyMessage_object_free(pointer, $0) }
    }

    public func textMessage() -> TextMessage? {
        return try! FfiConverterOptionTypeTextMessage.lift(
            try!
                rustCall {
                    sdk_22ae_AnyMessage_text_message(self.pointer, $0)
                }
        )
    }

    public func imageMessage() -> ImageMessage? {
        return try! FfiConverterOptionTypeImageMessage.lift(
            try!
                rustCall {
                    sdk_22ae_AnyMessage_image_message(self.pointer, $0)
                }
        )
    }

    public func noticeMessage() -> NoticeMessage? {
        return try! FfiConverterOptionTypeNoticeMessage.lift(
            try!
                rustCall {
                    sdk_22ae_AnyMessage_notice_message(self.pointer, $0)
                }
        )
    }

    public func emoteMessage() -> EmoteMessage? {
        return try! FfiConverterOptionTypeEmoteMessage.lift(
            try!
                rustCall {
                    sdk_22ae_AnyMessage_emote_message(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeAnyMessage: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AnyMessage

    static func read(from buf: Reader) throws -> AnyMessage {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: AnyMessage, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AnyMessage {
        return AnyMessage(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: AnyMessage) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol BaseMessageProtocol {
    func id() -> String
    func body() -> String
    func sender() -> String
    func originServerTs() -> UInt64
    func transactionId() -> String?
}

public class BaseMessage: BaseMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_BaseMessage_object_free(pointer, $0) }
    }

    public func id() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    sdk_22ae_BaseMessage_id(self.pointer, $0)
                }
        )
    }

    public func body() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    sdk_22ae_BaseMessage_body(self.pointer, $0)
                }
        )
    }

    public func sender() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    sdk_22ae_BaseMessage_sender(self.pointer, $0)
                }
        )
    }

    public func originServerTs() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    sdk_22ae_BaseMessage_origin_server_ts(self.pointer, $0)
                }
        )
    }

    public func transactionId() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    sdk_22ae_BaseMessage_transaction_id(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeBaseMessage: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BaseMessage

    static func read(from buf: Reader) throws -> BaseMessage {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: BaseMessage, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BaseMessage {
        return BaseMessage(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: BaseMessage) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol TextMessageProtocol {
    func baseMessage() -> BaseMessage
    func htmlBody() -> String?
}

public class TextMessage: TextMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_TextMessage_object_free(pointer, $0) }
    }

    public func baseMessage() -> BaseMessage {
        return try! FfiConverterTypeBaseMessage.lift(
            try!
                rustCall {
                    sdk_22ae_TextMessage_base_message(self.pointer, $0)
                }
        )
    }

    public func htmlBody() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    sdk_22ae_TextMessage_html_body(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeTextMessage: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TextMessage

    static func read(from buf: Reader) throws -> TextMessage {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: TextMessage, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TextMessage {
        return TextMessage(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: TextMessage) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol ImageMessageProtocol {
    func baseMessage() -> BaseMessage
    func source() -> MediaSource
    func width() -> UInt64?
    func height() -> UInt64?
    func blurhash() -> String?
}

public class ImageMessage: ImageMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_ImageMessage_object_free(pointer, $0) }
    }

    public func baseMessage() -> BaseMessage {
        return try! FfiConverterTypeBaseMessage.lift(
            try!
                rustCall {
                    sdk_22ae_ImageMessage_base_message(self.pointer, $0)
                }
        )
    }

    public func source() -> MediaSource {
        return try! FfiConverterTypeMediaSource.lift(
            try!
                rustCall {
                    sdk_22ae_ImageMessage_source(self.pointer, $0)
                }
        )
    }

    public func width() -> UInt64? {
        return try! FfiConverterOptionUInt64.lift(
            try!
                rustCall {
                    sdk_22ae_ImageMessage_width(self.pointer, $0)
                }
        )
    }

    public func height() -> UInt64? {
        return try! FfiConverterOptionUInt64.lift(
            try!
                rustCall {
                    sdk_22ae_ImageMessage_height(self.pointer, $0)
                }
        )
    }

    public func blurhash() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    sdk_22ae_ImageMessage_blurhash(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeImageMessage: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ImageMessage

    static func read(from buf: Reader) throws -> ImageMessage {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: ImageMessage, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ImageMessage {
        return ImageMessage(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: ImageMessage) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol NoticeMessageProtocol {
    func baseMessage() -> BaseMessage
    func htmlBody() -> String?
}

public class NoticeMessage: NoticeMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_NoticeMessage_object_free(pointer, $0) }
    }

    public func baseMessage() -> BaseMessage {
        return try! FfiConverterTypeBaseMessage.lift(
            try!
                rustCall {
                    sdk_22ae_NoticeMessage_base_message(self.pointer, $0)
                }
        )
    }

    public func htmlBody() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    sdk_22ae_NoticeMessage_html_body(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeNoticeMessage: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NoticeMessage

    static func read(from buf: Reader) throws -> NoticeMessage {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: NoticeMessage, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NoticeMessage {
        return NoticeMessage(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: NoticeMessage) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol EmoteMessageProtocol {
    func baseMessage() -> BaseMessage
    func htmlBody() -> String?
}

public class EmoteMessage: EmoteMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_EmoteMessage_object_free(pointer, $0) }
    }

    public func baseMessage() -> BaseMessage {
        return try! FfiConverterTypeBaseMessage.lift(
            try!
                rustCall {
                    sdk_22ae_EmoteMessage_base_message(self.pointer, $0)
                }
        )
    }

    public func htmlBody() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    sdk_22ae_EmoteMessage_html_body(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeEmoteMessage: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EmoteMessage

    static func read(from buf: Reader) throws -> EmoteMessage {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: EmoteMessage, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EmoteMessage {
        return EmoteMessage(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: EmoteMessage) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol MediaSourceProtocol {
    func url() -> String
}

public class MediaSource: MediaSourceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_MediaSource_object_free(pointer, $0) }
    }

    public func url() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    sdk_22ae_MediaSource_url(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeMediaSource: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MediaSource

    static func read(from buf: Reader) throws -> MediaSource {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: MediaSource, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MediaSource {
        return MediaSource(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: MediaSource) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol HomeserverLoginDetailsProtocol {
    func url() -> String
    func authenticationIssuer() -> String?
    func supportsPasswordLogin() -> Bool
}

public class HomeserverLoginDetails: HomeserverLoginDetailsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_HomeserverLoginDetails_object_free(pointer, $0) }
    }

    public func url() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    sdk_22ae_HomeserverLoginDetails_url(self.pointer, $0)
                }
        )
    }

    public func authenticationIssuer() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    sdk_22ae_HomeserverLoginDetails_authentication_issuer(self.pointer, $0)
                }
        )
    }

    public func supportsPasswordLogin() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_HomeserverLoginDetails_supports_password_login(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeHomeserverLoginDetails: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HomeserverLoginDetails

    static func read(from buf: Reader) throws -> HomeserverLoginDetails {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: HomeserverLoginDetails, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HomeserverLoginDetails {
        return HomeserverLoginDetails(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: HomeserverLoginDetails) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol AuthenticationServiceProtocol {
    func homeserverDetails() -> HomeserverLoginDetails?
    func configureHomeserver(serverName: String) throws
    func login(username: String, password: String) throws -> Client
    func restoreWithAccessToken(token: String, deviceId: String) throws -> Client
}

public class AuthenticationService: AuthenticationServiceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(basePath: String) {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                sdk_22ae_AuthenticationService_new(
                    FfiConverterString.lower(basePath), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_AuthenticationService_object_free(pointer, $0) }
    }

    public func homeserverDetails() -> HomeserverLoginDetails? {
        return try! FfiConverterOptionTypeHomeserverLoginDetails.lift(
            try!
                rustCall {
                    sdk_22ae_AuthenticationService_homeserver_details(self.pointer, $0)
                }
        )
    }

    public func configureHomeserver(serverName: String) throws {
        try
            rustCallWithError(FfiConverterTypeAuthenticationError.self) {
                sdk_22ae_AuthenticationService_configure_homeserver(self.pointer,
                                                                    FfiConverterString.lower(serverName), $0)
            }
    }

    public func login(username: String, password: String) throws -> Client {
        return try FfiConverterTypeClient.lift(
            try
                rustCallWithError(FfiConverterTypeAuthenticationError.self) {
                    sdk_22ae_AuthenticationService_login(self.pointer,
                                                         FfiConverterString.lower(username),
                                                         FfiConverterString.lower(password), $0)
                }
        )
    }

    public func restoreWithAccessToken(token: String, deviceId: String) throws -> Client {
        return try FfiConverterTypeClient.lift(
            try
                rustCallWithError(FfiConverterTypeAuthenticationError.self) {
                    sdk_22ae_AuthenticationService_restore_with_access_token(self.pointer,
                                                                             FfiConverterString.lower(token),
                                                                             FfiConverterString.lower(deviceId), $0)
                }
        )
    }
}

private struct FfiConverterTypeAuthenticationService: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticationService

    static func read(from buf: Reader) throws -> AuthenticationService {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: AuthenticationService, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticationService {
        return AuthenticationService(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: AuthenticationService) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol SessionVerificationEmojiProtocol {
    func symbol() -> String
    func description() -> String
}

public class SessionVerificationEmoji: SessionVerificationEmojiProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_SessionVerificationEmoji_object_free(pointer, $0) }
    }

    public func symbol() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    sdk_22ae_SessionVerificationEmoji_symbol(self.pointer, $0)
                }
        )
    }

    public func description() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    sdk_22ae_SessionVerificationEmoji_description(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeSessionVerificationEmoji: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SessionVerificationEmoji

    static func read(from buf: Reader) throws -> SessionVerificationEmoji {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: SessionVerificationEmoji, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SessionVerificationEmoji {
        return SessionVerificationEmoji(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: SessionVerificationEmoji) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol SessionVerificationControllerProtocol {
    func setDelegate(delegate: SessionVerificationControllerDelegate?)
    func isVerified() -> Bool
    func requestVerification() throws
    func approveVerification() throws
    func declineVerification() throws
    func cancelVerification() throws
}

public class SessionVerificationController: SessionVerificationControllerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_sdk_22ae_SessionVerificationController_object_free(pointer, $0) }
    }

    public func setDelegate(delegate: SessionVerificationControllerDelegate?) {
        try!
            rustCall {
                sdk_22ae_SessionVerificationController_set_delegate(self.pointer,
                                                                    FfiConverterOptionCallbackInterfaceSessionVerificationControllerDelegate.lower(delegate), $0)
            }
    }

    public func isVerified() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    sdk_22ae_SessionVerificationController_is_verified(self.pointer, $0)
                }
        )
    }

    public func requestVerification() throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                sdk_22ae_SessionVerificationController_request_verification(self.pointer, $0)
            }
    }

    public func approveVerification() throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                sdk_22ae_SessionVerificationController_approve_verification(self.pointer, $0)
            }
    }

    public func declineVerification() throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                sdk_22ae_SessionVerificationController_decline_verification(self.pointer, $0)
            }
    }

    public func cancelVerification() throws {
        try
            rustCallWithError(FfiConverterTypeClientError.self) {
                sdk_22ae_SessionVerificationController_cancel_verification(self.pointer, $0)
            }
    }
}

private struct FfiConverterTypeSessionVerificationController: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SessionVerificationController

    static func read(from buf: Reader) throws -> SessionVerificationController {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: SessionVerificationController, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SessionVerificationController {
        return SessionVerificationController(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: SessionVerificationController) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public enum ClientError {
    case Generic(msg: String)
}

private struct FfiConverterTypeClientError: FfiConverterRustBuffer {
    typealias SwiftType = ClientError

    static func read(from buf: Reader) throws -> ClientError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .Generic(
                msg: try FfiConverterString.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: ClientError, into buf: Writer) {
        switch value {
        case let .Generic(msg):
            buf.writeInt(Int32(1))
            FfiConverterString.write(msg, into: buf)
        }
    }
}

extension ClientError: Equatable, Hashable {}

extension ClientError: Error {}

public enum AuthenticationError {
    // Simple error enums only carry a message
    case ClientMissing(message: String)

    // Simple error enums only carry a message
    case SessionMissing(message: String)

    // Simple error enums only carry a message
    case Generic(message: String)
}

private struct FfiConverterTypeAuthenticationError: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticationError

    static func read(from buf: Reader) throws -> AuthenticationError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .ClientMissing(
                message: try FfiConverterString.read(from: buf)
            )

        case 2: return .SessionMissing(
                message: try FfiConverterString.read(from: buf)
            )

        case 3: return .Generic(
                message: try FfiConverterString.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: AuthenticationError, into buf: Writer) {
        switch value {
        case let .ClientMissing(message):
            buf.writeInt(Int32(1))
            FfiConverterString.write(message, into: buf)
        case let .SessionMissing(message):
            buf.writeInt(Int32(2))
            FfiConverterString.write(message, into: buf)
        case let .Generic(message):
            buf.writeInt(Int32(3))
            FfiConverterString.write(message, into: buf)
        }
    }
}

extension AuthenticationError: Equatable, Hashable {}

extension AuthenticationError: Error {}

// Declaration and FfiConverters for ClientDelegate Callback Interface

public protocol ClientDelegate: AnyObject {
    func didReceiveSyncUpdate()
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceClientDelegate: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveSyncUpdate(_ swiftCallbackInterface: ClientDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didReceiveSyncUpdate()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb = try! FfiConverterCallbackInterfaceClientDelegate.lift(handle)
        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceClientDelegate.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            let buffer = try! invokeDidReceiveSyncUpdate(cb, args)
            out_buf.pointee = buffer
            // Value written to out buffer.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 1

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceClientDelegate {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_sdk_22ae_ClientDelegate_init_callback(foreignCallbackCallbackInterfaceClientDelegate, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<ClientDelegate>()
}

extension FfiConverterCallbackInterfaceClientDelegate: FfiConverter {
    typealias SwiftType = ClientDelegate
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

// Declaration and FfiConverters for RoomDelegate Callback Interface

public protocol RoomDelegate: AnyObject {
    func didReceiveMessage(message: AnyMessage)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceRoomDelegate: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveMessage(_ swiftCallbackInterface: RoomDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.didReceiveMessage(
                message: try FfiConverterTypeAnyMessage.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb = try! FfiConverterCallbackInterfaceRoomDelegate.lift(handle)
        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceRoomDelegate.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            let buffer = try! invokeDidReceiveMessage(cb, args)
            out_buf.pointee = buffer
            // Value written to out buffer.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 1

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceRoomDelegate {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_sdk_22ae_RoomDelegate_init_callback(foreignCallbackCallbackInterfaceRoomDelegate, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<RoomDelegate>()
}

extension FfiConverterCallbackInterfaceRoomDelegate: FfiConverter {
    typealias SwiftType = RoomDelegate
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

// Declaration and FfiConverters for SessionVerificationControllerDelegate Callback Interface

public protocol SessionVerificationControllerDelegate: AnyObject {
    func didReceiveVerificationData(data: [SessionVerificationEmoji])
    func didFail()
    func didCancel()
    func didFinish()
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSessionVerificationControllerDelegate: ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDidReceiveVerificationData(_ swiftCallbackInterface: SessionVerificationControllerDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            let reader = Reader(data: Data(rustBuffer: args))
            swiftCallbackInterface.didReceiveVerificationData(
                data: try FfiConverterSequenceTypeSessionVerificationEmoji.read(from: reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }
        func invokeDidFail(_ swiftCallbackInterface: SessionVerificationControllerDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didFail()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }
        func invokeDidCancel(_ swiftCallbackInterface: SessionVerificationControllerDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didCancel()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }
        func invokeDidFinish(_ swiftCallbackInterface: SessionVerificationControllerDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }
            swiftCallbackInterface.didFinish()
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb = try! FfiConverterCallbackInterfaceSessionVerificationControllerDelegate.lift(handle)
        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceSessionVerificationControllerDelegate.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            let buffer = try! invokeDidReceiveVerificationData(cb, args)
            out_buf.pointee = buffer
            // Value written to out buffer.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 1
        case 2:
            let buffer = try! invokeDidFail(cb, args)
            out_buf.pointee = buffer
            // Value written to out buffer.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 1
        case 3:
            let buffer = try! invokeDidCancel(cb, args)
            out_buf.pointee = buffer
            // Value written to out buffer.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 1
        case 4:
            let buffer = try! invokeDidFinish(cb, args)
            out_buf.pointee = buffer
            // Value written to out buffer.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 1

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FFIConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSessionVerificationControllerDelegate {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_sdk_22ae_SessionVerificationControllerDelegate_init_callback(foreignCallbackCallbackInterfaceSessionVerificationControllerDelegate, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<SessionVerificationControllerDelegate>()
}

extension FfiConverterCallbackInterfaceSessionVerificationControllerDelegate: FfiConverter {
    typealias SwiftType = SessionVerificationControllerDelegate
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized()
        buf.writeInt(lower(v))
    }
}

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    static func read(from buf: Reader) throws -> UInt8 {
        return try lift(buf.readInt())
    }

    static func write(_ value: UInt8, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    static func read(from buf: Reader) throws -> UInt16 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    static func read(from buf: Reader) throws -> UInt64 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    static func write(_ value: Bool, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}

// Helper code for AnyMessage class is found in ObjectTemplate.swift
// Helper code for AuthenticationService class is found in ObjectTemplate.swift
// Helper code for BackwardsStream class is found in ObjectTemplate.swift
// Helper code for BaseMessage class is found in ObjectTemplate.swift
// Helper code for Client class is found in ObjectTemplate.swift
// Helper code for ClientBuilder class is found in ObjectTemplate.swift
// Helper code for EmoteMessage class is found in ObjectTemplate.swift
// Helper code for HomeserverLoginDetails class is found in ObjectTemplate.swift
// Helper code for ImageMessage class is found in ObjectTemplate.swift
// Helper code for MediaSource class is found in ObjectTemplate.swift
// Helper code for MessageEventContent class is found in ObjectTemplate.swift
// Helper code for NoticeMessage class is found in ObjectTemplate.swift
// Helper code for Room class is found in ObjectTemplate.swift
// Helper code for SessionVerificationController class is found in ObjectTemplate.swift
// Helper code for SessionVerificationEmoji class is found in ObjectTemplate.swift
// Helper code for TextMessage class is found in ObjectTemplate.swift
// Helper code for Membership enum is found in EnumTemplate.swift
// Helper code for AuthenticationError error is found in ErrorTemplate.swift
// Helper code for ClientError error is found in ErrorTemplate.swift

private struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterUInt16.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterUInt64.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterString.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeBackwardsStream: FfiConverterRustBuffer {
    typealias SwiftType = BackwardsStream?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeBackwardsStream.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBackwardsStream.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeEmoteMessage: FfiConverterRustBuffer {
    typealias SwiftType = EmoteMessage?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeEmoteMessage.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeEmoteMessage.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeHomeserverLoginDetails: FfiConverterRustBuffer {
    typealias SwiftType = HomeserverLoginDetails?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeHomeserverLoginDetails.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeHomeserverLoginDetails.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeImageMessage: FfiConverterRustBuffer {
    typealias SwiftType = ImageMessage?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeImageMessage.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeImageMessage.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeNoticeMessage: FfiConverterRustBuffer {
    typealias SwiftType = NoticeMessage?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeNoticeMessage.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNoticeMessage.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeTextMessage: FfiConverterRustBuffer {
    typealias SwiftType = TextMessage?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeTextMessage.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTextMessage.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceClientDelegate: FfiConverterRustBuffer {
    typealias SwiftType = ClientDelegate?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterCallbackInterfaceClientDelegate.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceClientDelegate.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceRoomDelegate: FfiConverterRustBuffer {
    typealias SwiftType = RoomDelegate?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterCallbackInterfaceRoomDelegate.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceRoomDelegate.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceSessionVerificationControllerDelegate: FfiConverterRustBuffer {
    typealias SwiftType = SessionVerificationControllerDelegate?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceSessionVerificationControllerDelegate.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    static func write(_ value: [UInt8], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterUInt8.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [UInt8] {
        let len: Int32 = try buf.readInt()
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeAnyMessage: FfiConverterRustBuffer {
    typealias SwiftType = [AnyMessage]

    static func write(_ value: [AnyMessage], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeAnyMessage.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [AnyMessage] {
        let len: Int32 = try buf.readInt()
        var seq = [AnyMessage]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAnyMessage.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeRoom: FfiConverterRustBuffer {
    typealias SwiftType = [Room]

    static func write(_ value: [Room], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeRoom.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [Room] {
        let len: Int32 = try buf.readInt()
        var seq = [Room]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRoom.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeSessionVerificationEmoji: FfiConverterRustBuffer {
    typealias SwiftType = [SessionVerificationEmoji]

    static func write(_ value: [SessionVerificationEmoji], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeSessionVerificationEmoji.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [SessionVerificationEmoji] {
        let len: Int32 = try buf.readInt()
        var seq = [SessionVerificationEmoji]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSessionVerificationEmoji.read(from: buf))
        }
        return seq
    }
}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum SdkLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
        // No initialization code needed
    }
}
